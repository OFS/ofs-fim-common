#!/bin/bash
# Copyright (C) 2020-2023 Intel Corporation
# SPDX-License-Identifier: MIT

# DESCRIPTION:
# This script reads the apf.txt and bpf.txt from ${OFS_ROOTDIR}/src/pd_qsys/fabric and generates a 
# parameter file ${FABRIC_DIR}/src/includes/fabric_width_pkg.sv from the values read. The name of each
# parameter is '<NAME>_<TYPE>_<1 of "baseaddress", "address_width"> = <Corresponding entry>'. Additionally,
# parameters for next_dfh_offset and eol are generated by sorting all the values in both apf and bpf, then
# taking the difference between adjacent values. "n/a" entries are ignored. 

echo "gen_fabrics_width_pkg.sh: running..."

SCRIPTNAME="$(basename -- "${BASH_SOURCE[0]}")"
# FABRIC_DIR="$(cd "$(dirname -- "${BASH_SOURCE[0]}")" 2>/dev/null && pwd -P)"
FABRIC_DIR="${OFS_ROOTDIR}/src/pd_qsys/fabric"
OUTPUT_PKG="${FABRIC_DIR}/../../includes/fabric_width_pkg.sv" # CHANGE THIS
BASE_ADDRESS_COLUMN=2

if [ ! -e "$OUTPUT_PKG" ] ; then
    touch $OUTPUT_PKG
fi

# CLEAR OLD FILE
cat "/dev/null" > $OUTPUT_PKG

# WRITE HEADER
TEMP=$(mktemp)   
echo '// Copyright (C) 2021 Intel Corporation.' >> "${TEMP}"
echo '// SPDX-License-Identifier: MIT' >> "${TEMP}"
echo '' >> "${TEMP}"
echo '//' >> "${TEMP}"
echo '// Description' >> "${TEMP}"
echo '//-----------------------------------------------------------------------------' >> "${TEMP}"
echo '//' >> "${TEMP}"
echo '// This package defines the global parameters of FIM' >> "${TEMP}"
echo '//' >> "${TEMP}"
echo '//----------------------------------------------------------------------------' >> "${TEMP}"
echo '' >> "${TEMP}"
echo '' >> "${TEMP}"
mv "$TEMP" "$OUTPUT_PKG"

# WRITE DEFINES
echo '`ifndef __FABRIC_WIDTH_PKG_SV__' >> "${TEMP}"
echo '`define __FABRIC_WIDTH_PKG_SV__' >> "${TEMP}"
echo '' >> "${TEMP}"
echo '// IP configuration database, generated by OFS script gen_pkg.sh after' >> "${TEMP}"
echo '// IP generation.' >> "${TEMP}"
# echo '`include "ofs_ip_cfg_db.vh"'  >> "${TEMP}" # Is this necessary?
echo '' >> "${TEMP}"
echo 'package fabric_width_pkg;' >> "${TEMP}"
echo '' >> "${TEMP}"

# WRITE BODY
LINES=()
NUM_COLS=0
ADDRESS_INFO=()
ADDRESSES=()
EOL=()
SOC_EOL=()
for FILE in "apf.txt" "soc_apf.txt" "bpf.txt"; do
    DATA=()
    if [ -f "$FABRIC_DIR/$FILE" ] ; then
        COLUMNS=($(tail -n +2 "$FABRIC_DIR/$FILE" | head -n 1 | cut -c3-))
        NUM_COLS=${#COLUMNS[@]}
        NAME="${FILE%.*}"

        LINES=($(awk 'NR > 2 {print $0}' "${FABRIC_DIR}/${FILE}"))        
        for LINE in "${LINES[@]}" ; do
            DATA+=($(echo "${LINE}"))
        done
           
        for ((i=0; i<${#DATA[@]}; i+=$NUM_COLS)) ; do
            if (( i + $NUM_COLS > ${#DATA[@]} - 1)) && [[ ${NAME,,} = apf ]] ; then
                    EOL="${NAME,,}_${DATA[i],,}_${DATA[i+1],,}"
            fi
            if (( i + $NUM_COLS > ${#DATA[@]} - 1)) && [[ ${NAME,,} = soc_apf ]] ; then
                    SOC_EOL="${NAME,,}_${DATA[i],,}_${DATA[i+1],,}"
            fi
            
            for ((j=2; j<${NUM_COLS}; j++)) ; do
                if [ "${DATA[i+j]}" != "n/a" ] && [ "${COLUMNS[j],,}" != "slaves" ]; then
                    #Remove 0x prefix before inserting data
                    CLEAN_DATA=${DATA[i+j]}
                    if [[ ${DATA[i+j]} == 0x* ]] ; then
                        CLEAN_DATA="'h${DATA[i+j]#0x}" 
                    fi
                    echo "localparam ${NAME,,}_${DATA[i],,}_${DATA[i+1],,}_${COLUMNS[j],,}" = "$CLEAN_DATA;" >> "${TEMP}"

                    if [ "$j" -eq "$BASE_ADDRESS_COLUMN" ] && [ ${DATA[i+j]} != "n/a" ]; then
                        ADDRESS_INFO+=("${NAME,,}_${DATA[i],,}_${DATA[i+1],,}")
                        ADDRESSES+=("${DATA[i+j]}")
                    fi
                fi
            done
            echo '' >> "${TEMP}" 
        done
    fi

done

echo '' >> "${TEMP}"

#Sort both file addresses to generate DFH offsets
SORT_FILE=$(mktemp)
for (( i=0; i<${#ADDRESSES[@]}; i++)) ; do
    ADDRESS_D=$(printf "%d" "${ADDRESSES[i]}")
    echo "${ADDRESS_D} ${ADDRESS_INFO[i]}" >> "$SORT_FILE"
done

sort -n -k1 "$SORT_FILE" -o "$SORT_FILE"

ADDRESSES=()
ADDRESS_INFO=()
while IFS=' ' read -r ADDRESS ADDR_INFO; do
    ADDRESS_H=$(printf "%x" "$ADDRESS")
    ADDRESSES+=("$ADDRESS")
    ADDRESS_INFO+=("$ADDR_INFO")
done < "$SORT_FILE"

rm "$SORT_FILE"

# WRITE DIFFERENCES FOR NEXT DFH OFFSET
for ((i=0; i+1<${#ADDRESSES[@]}; i++)) ; do
    SPACE=$((ADDRESSES[i+1] - ADDRESSES[i]))
    if [ "${ADDRESS_INFO[i],,}" = "bpf_fme_slv" ] ; then # Skip PCIe
        for ((j=0; j+1<${#ADDRESSES[@]}; j++)) ; do
            if [ "${ADDRESS_INFO[j],,}" = "bpf_pcie_slv" ] || [ "${ADDRESS_INFO[j],,}" = "bpf_soc_pcie_slv" ] ; then
                SPACE=$((ADDRESSES[j+1] - ADDRESSES[i]))
            fi
        done
        # SPACE=$((ADDRESSES[i+2] - ADDRESSES[i]))
    fi
    SPACE=$(printf "%x" "$SPACE")
    echo "localparam ${ADDRESS_INFO[i],,}_next_dfh_offset" = "'h${SPACE^^};" >> "${TEMP}"
    if [ "${EOL}" == ${ADDRESS_INFO[i],,} ] || [ "${SOC_EOL}" == ${ADDRESS_INFO[i],,} ]; then
        echo "localparam ${ADDRESS_INFO[i],,}_eol" = "'b1;" >> "${TEMP}"
    else 
        echo "localparam ${ADDRESS_INFO[i],,}_eol" = "'b0;" >> "${TEMP}"
    fi
    echo '' >> "${TEMP}"
done

echo "// Hardcoded from ofs-common/src/common/fme/fme_csr.sv" >> "${TEMP}"
echo "// To modify, do so in ofs-common/tools/fabric_generation/gen_fabric_width_pkg.sh" >> "${TEMP}"
echo "localparam fme_csr_fme_dfh_index" = "'h001000;" >> "${TEMP}"
echo "localparam fme_csr_therm_mngm_dfh" = "'h002000;" >> "${TEMP}"
echo "localparam fme_csr_glbl_perf" = "'h001000;" >> "${TEMP}"
echo "localparam fme_csr_glbl_error" = "'h00e000;" >> "${TEMP}"
echo '' >> "${TEMP}"
echo "// Hardcoded from ofs-common/src/common/port_gasket/pg_csr.sv" >> "${TEMP}"
echo "// To modify, do so in ofs-common/tools/fabric_generation/gen_fabric_width_pkg.sh" >> "${TEMP}"
echo "localparam port_pg_pr_dfh" = "'h001000;" >> "${TEMP}"
echo "localparam fme_csr_fme_pr" = "'h001000;" >> "${TEMP}"
echo "localparam port_csr_port" = "'h001000;" >> "${TEMP}"
echo "localparam port_csr_port_stp" = "'h00d000;" >> "${TEMP}"

echo '' >> "${TEMP}"

# WRITE FOOTER
echo 'endpackage' >> "${TEMP}"
echo '' >> "${TEMP}"
echo '`endif // __FABRIC_WIDTH_PKG_SV__' >> "${TEMP}"

sed -i '12 r'$TEMP'' "$OUTPUT_PKG"
rm $TEMP



