

                    OFS FPGA Image Build
          ========================================

Overview:
---------

The syn directory contains Quartus projects and scripts to build the OFS designs
within this repo

Usage
-----

Quartus compile: (FIM compile)
    There are multiple ways to compile the design to give flexibility for the designer but currently only the build script flow is supported
    1.	Get a "bash" shell (e.g. xterm)
    2.	Go to the OFS Repo root directory.
    3.  Set the tool paths for quartus  
    4.	Set the required environment and directory Structure variables (as shown below)
        export OFS_ROOTDIR=<FIM's root directory>
        export WORKDIR=<FIM's root directory>

    5. run ofs-common/scripts/common/syn/build_top.sh <target> <work_dir> 
        - <target> is in the format of n6001/d5005 etc
        - <work_dir> can be a path outside of the local repo, or a name (will be created in the <local repo>/<work_dir>
            - e.g.
                - OFS N6001 project:  ofs-common/scripts/common/syn/build_top.sh -p n6001 work_n6001
                - OFS D5005 project:  ofs-common/scripts/common/syn/build_top.sh -p d5005 work_d5005
                This obmission of <work_dir> will get a default work directory (<local repo>/work
        - compile reports and artifacts (.rpt, .sof, etc) will be in <work_dir>/syn/syn_top/output_files
        - log file created in ofs-dev directory

 
Note:   n6001 FIM supports comma separated compile time options that could be handy for development. 
        Example usage: "ofs-common/scripts/common/syn/build_top.sh n6001:<option1>,<option2> work_n6001"
                - flat: Compiles a flat design (no pr assignments). Useful for bringing up the design in a new board without dealing with PR complexity.
                - null_he_lb,null_he_hssi,null_he_mem,null_he_mem_tg: Replaces the target exercisers within the code with "null_he"
                        * "he_null" is a minimal block with registers that responds to PCIe MMIO request. MMIO responses are required to keep PCIe alive 
                        (end points enabled in PCIe-SS needs service downstream requests).
                        * If an exerciser with other I/O connections such has "he_mem" or "he_hssi" is replaced, then then those I/O ports are simply tied off
                        * The options supported are null_he_lb, null_he_hssi, null_he_mem and null_he_mem_tg. Any combination, order or all can be enabled at the same time. 
                        * Finer grain control is provided since the user may just turn off the exercisers in Static region only (not replace PR region) to save area. 


Quartus compile: (PR compile)
    The PR compile must be run after the FIM compile is complete as the qdb and sdc files are generated by the FIM build for PR compile
    PR compile tasks:
        - clones and builds opae-sdk (some tools are needed for the PR build)
        - sources build_setup.sh to set build environment variables
        - compiles PR design and uses the qdb file to represent the SR region.
        - generates gbs file (rbf bitstream for PR region is wrapped with the JSON data to create a GBS file)
        - if PACSign is available, will take the gbs file and adds block 0/1 data to create a new _unsigned.gbs file for use with 'fpgasupdate' tool

    Method to compile the PR design:
    - run ofs-common/scripts/common/syn/compile_pr_slot.sh <target> <work_dir>
        - e.g. ofs-common/scripts/common/syn/compile_pr_slot.sh d5005 work_d5005
        - The work directory will need to match the work directory that was created in the FIM compile
        - Quartus revision and partition names are set in the build_var_setup.sh file (along with file locations for PR, script pointers, repo address and branch info)
        - PR compile will need to be done in-tree
            - modifications of the script, build_setup.sh, PR qsf file/scripts and creation of a script to package up the RTL files, scripts will need to be done to create a stand-alone 'release tree'



Scripts
-------

build_top.sh -
        entry point to the build flow. (requires target arguments)
        Do not need to edit this script. New build will be indexed by OFS_PROJECT, OFS_FIM, and OFS_BOARD variables. (OFS_FIM and OFS_BOARD can be optional)
        Script flow: 
            - sources syn/<OFS_PROJECT>/scripts/build_var_setup.sh
            - then calls ofs-common/scripts/common/syn/build_fim.sh
        This script gets the pointer aid to build_var_setup.sh from the first argument
        The optional second argument is to specify the work directory
            - work directory can be a name (creates work directory in ofs_dev directory
            - work directory can be a path (path cannot be lower than ofs_dev/<work>, but can be in another location>
            - see create_work_dir.sh section below for more details and examples    

build_setup.sh - 
        Set up the build environment. The primary function is loading build variables
        from syn/<OFS_PROJECT>/scripts/build_var_setup.sh.
        The project-specific build_var_setup.sh specifies project names, revisions,
        FME register values, build flow, script, etc. It needs to be edited for each
        project to add/remove flows, scripts, or change project variables
        Specifies all the build environment variables
        Major variables that needs to be set the OFS_PROJECT, OFS_FIM, OFS_BOARD

build_fim.sh - 
        main build script. Controls via variables set in build_var_setup.sh
        Do not need to edit this script.
        This script takes variables set in build_setup.sh to control the build flow
        flows (can be individually enabled/disabled)
            - creation of work director
            - run pre compile script
            - fim compile
            - run post compile script
            - display timing pass/fail

create_work_dir.sh - 
        Creates the work directory by either file symlink or copy
        Do not need to edit this script.
        Script can be uses as a standlone ( 'create_work_dir.sh -h' for help)
        Work directory requirements:
            - work directory needs to start with "work"  e.g. work_d5005 or work2 or /tmp/usr1/work_1
            - can be specified by name or <path>/<name>
                - if a name is specified, then the work directory will be created in ofs-dev/
                - if a <path>/<name> is specified, then the directory path can be outside ofs-dev or in ofs-dev, but not in subdirectories lower than ofs-dev
                    - e.g. /tmp/work 
            - no argument will result in 'work' directory in ofs-dev: ofs_dev/work
            - The work directory can be specified by a path (work cannot lower directory than in ofs-dev)
                - correct usage: /tmp/gitlab_repos/ofs-dev/work1
                - correct usage: /tmp/work1
                - incorrect usage: /tmp/gitlab_repos/ofs-dev/syn/work1
        Select copy files (not symlink):
            - running as stand alone script: Can use -c inline argument 'create_work_dir.sh -c work1' or can set COPY_WORK variable: 'export COPY_WORK="1"' and then run 'create_work_dir.sh work1'
            - running build_top.sh: set the COPY_WORK variable before running build_top.sh.  'export COPY_WORK="1"' then run build_top.sh
        Forced overwrite work directory:
            - running as a stand alone script: can use -f inline argument or set FORCE env variable: 'create_work_dir.sh -f' or 'export FORCE="1"'
            - running build_top.sh: set FORCE varilable before running build_top.sh
            - if the work directory exists and -f or FORCE is not set, then a prompt to continue (no change), force (recopy or resymlink), or exit. a timer will timeout and exit if nothing is entered before the timeout time.
flow.tcl - 
        handles the Quartus shell calls to compile the design
        Do not need to edit this script.
        have functions to:
            - compile all PR personas and base revision
            - compile specific PR persona based on revision name
            - compile all PR personas only (no base revision compile)
            - compile only the base revision (no PR psersona)

setup.tcl - 
        sets project and revision for Quartus compile
        Do not need to edit this script.
        script also is used for PR compiles to specify the PR revision and partition and is gated by the PR_COMPILE variable as PR settings are not used in the FIM compile
        used by flow.tcl

update_fme_ifc_id.py - 
        Edits FME memory contents (fme_id.mif) with the calculated PR ID and bitstream ID and metadata for the fme_id_rom IP file.
        Do not need to edit this script
        This script is used post syn and fit to edit the rom content after compilation as the hash is a sha of the compile directory to create a unique PR IP for the compile
        Bitstream ID and MD are set and generated in the build_setup.sh

report_timing.tcl - 
        Generates clock timing reports in output_files/timing_reports
        Do not need to edit this script.
        Creates detailed and pass/fail clock summary reports
        Note: clocks.sta.failed.summary is used by other scripts to check if timing has passed or not (empty file = timing pass)

display_timing_pass_fail.sh - 
        Displays whether timing passed or failed in the base FIM build
        Do not need to edit this script.
        This script checks the output file of report_timing.tcl to see if timing passes or fails and displays it.
        for use at the end of the build flow to indicate if timing is good nor not.
        Displays OFS_PROJECT, OFS_FIM, OFS_BOARD, Fitter seed value, etc... 
        report_timing.tcl needs to be run prior to this script as this script checks clocks.sta.failed.summary

setup_opae_sdk.sh -
        location: syn/common/scripts/
        Do not need to edit this script
        clones opae-sdk and builds PACSign and packager tools
        adds opae-sdk/platforms/scripts to PATH
        can run this script as a standalone script to setup opae-sdk with default variables
        if parameters, such as repo address, branch, target directories need to be changed, build_var_setup.sh contains commented out variables that can be uncommented and changed
        script must be sourced as this sets env variable PATH

pr_setup.sh - 
        Do not need to edit this script
        creates SDC file for PR compile and apply any fix to it
        setup user clock for PR compile
        uses create_sdc_for_pr_compile.tcl and setup_user_clock_for_pr.tcl
        the user clock creation is gated by ENA_USER_CLOCK_FOR_PR

create_sdc_for_pr_compile.tcl -
        Do not need to edit this script
        creates SDC constraints from FIM SR region for use in PR compile
        involes through quartus_sta to open up the Quartus project 
        
fix_pr_sdc.py - 
        Do not need to edit this script unless additional fixes are needed or for removing existing fix.
        corrects issues with generated SDC for PR - deletes "get_combs" as get_combs causes PR compile errors when reading SDC file

setup_user_clock_for_pr.tcl - 
        Do not need to edit this script
        creates user_clock_defs.tcl in the output_files directory for use with user clock setup
        involes through quartus_sta to open up the Quartus project and sources import_user_clk_sdc.tcl 

import_user_clk_sdc.tcl -
        Do not need to edit this script
        setup_user_clock_for_pr.tcl sources this script in order to use the setup_user_clk_sdc function 

build_flash -
        This directory contains the scripts necessary to build flash images for the associated OFS_PROJECT's board.
        each project may be unique so separate build_flash content are part of the OFS project's scripts (this is not common)
        Please refer to the README file in the build_flash directory for more information
