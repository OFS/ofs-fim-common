# Copyright 2023 Intel Corporation
# SPDX-License-Identifier: MIT

namespace eval ::ofs_ip_cfg_db {
    set this_script_dir [file dirname [info script]]

    if { ! [info exists ip_db] } {
        # ip_db is the primary database of IP that will be processed.
        # Values will be added in project .tcl files next to IP imports.
        # Keys are the paths of the IP files. Values are a 2 entry list.
        # The first list entry is the name of the subsystem in OFS's
        # configuration space (e.g. "pcie_ss"). The second is the name
        # of the IP-specific Tcl file that will be run to extract the
        # parameters.
        #
        # The IP-specific Tcl script may either be a full path or the
        # name of a script in the same directory as this script.
        #
        # For example:
        #  dict set ::ofs_ip_cfg_db::ip_db $::env(BUILD_ROOT_REL)/ipss/pcie/qip/pcie_ss.ip [list pcie_ss pcie_ss_get_cfg.tcl]
        #
        set ip_db [dict create]
    }

    # Process IP defined in ip_db and generate configuration header files.
    # This procedure is invoked by a post-module hook in the FIM build after
    # quartus_ipgenerate.
    proc generate {} {
        ::ofs_ip_cfg_db::create_db

        set project [get_current_project]
        set revision [get_current_revision]

        # Emit a wrapper header file that includes all generated header files
        set wrapper_fn [open ofs_ip_cfg_db/ofs_ip_cfg_db.vh w]
        puts $wrapper_fn "//"
        puts $wrapper_fn "// Generated by OFS script ofs_ip_cfg_db.tcl"
        puts $wrapper_fn "//\n"
        puts $wrapper_fn "// Include all generated configuration files"

        # For each IP to process
        foreach ip_file [dict keys $::ofs_ip_cfg_db::ip_db] {
            set v [dict get $::ofs_ip_cfg_db::ip_db $ip_file]

            # Extract the name to give the IP in OFS configuration space
            set ip_name [lindex $v 0]
            # Extract the path to the script
            set ip_script [lindex $v 1]
            if { ! [file exists $ip_script] } {
                # Script isn't a full path. Look in the script directory. (The same
                # directory as this ofs_ip_cfg_db.tcl script.)
                set p [file join $::ofs_ip_cfg_db::this_script_dir $ip_script]
                if { ! [file exists $p] } {
                    post_message -type error "OFS IP script $ip_script not found for $ip_file"
                    exit 1
                }
                set ip_script $p
            }

            set tgt_fname ofs_ip_cfg_${ip_name}.vh
            puts $wrapper_fn "`include \"${tgt_fname}\""

            # Don't regenerate files when the generated file exists and is younger
            # than the IP file.
            if { [file exists ofs_ip_cfg_db/${tgt_fname}] &&
                 [file mtime ofs_ip_cfg_db/${tgt_fname}] > [file mtime ${ip_file}] } {
                post_message "ofs_ip_cfg_db/${tgt_fname} is already up to date."
                continue
            }

            set cmd "source ${ip_script}\; emit_ip_cfg ofs_ip_cfg_db/${tgt_fname} [string toupper ${ip_name}]"
            set args [list --quartus-project=${project} --rev=${revision} --system-file=${ip_file} --cmd=${cmd}]
            post_message "Generating ofs_ip_cfg_db/${tgt_fname} with: qsys-script" -submsgs $args
            # qsys-script writes info messages to stderr, which confuses Tcl into
            # thinking there is a problem. Force stderr to stdout and just use the
            # exit code.
            if { [catch {exec qsys-script {*}${args} 2>@1} output] } {
                post_message $output
                post_message -type error "Error executing: qsys-script"
                exit 1
            } else {
                # Clean up the output of qsys-script. It prints a message every time
                # get_instance_* is called. Drop them.
                regsub -all {\n[^\n]*Info: (get_|send_message)[^\n]*} $output "" output
                regsub -all {Info: Info:} $output "Info:" output
                post_message $output
            }
        }

        close $wrapper_fn
    }

    # Create ofs_ip_cfg_db under the project if it doesn't exist
    proc create_db {} {
        if { ! [file exists ofs_ip_cfg_db] } {
            file mkdir ofs_ip_cfg_db

            # Create an empty wrapper .vh file that will be populated later
            close [open ofs_ip_cfg_db/ofs_ip_cfg_db.vh w]

            # Create README file
            set of [open ofs_ip_cfg_db/README w]
            puts $of "This directory is generated by the OFS common script ofs_ip_cfg_db.tcl."
            puts $of "It contains parameters extracted from IP. The extraction runs as a"
            puts $of "post-module hook after ipgenerate."
            puts $of ""
            puts $of "The names of IP files to parse are added by projects to the"
            puts $of "::ofs_ip_cfg_db::ip_db Tcl dictionary, defined and managed in"
            puts $of "ofs_ip_cfg_db.tcl."
            close $of
        }
    }
}
