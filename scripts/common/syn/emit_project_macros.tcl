# Copyright 2022 Intel Corporation
# SPDX-License-Identifier: MIT

##
## Invoke from quartus_sh -t.
##
## Emit all macros defined in a Quartus project.
##

# Add tcl_lib subdirectory of this script to package search path
lappend auto_path [file join [pwd] [file dirname [info script]] tcl_lib]
# OFS script for parsing command line options
package require options


#************************************************
# Description: Print the HELP info
#************************************************
proc PrintHelp {} {
   puts "This script emits all the macros defined in a project."
   puts "Usage: emit_project_macros.tcl --project=<proj> --revision=<rev> --output=<fname>"
   puts "                               \[--mode=<sim|tcl|txt>\]"
   puts ""
   puts "Supported options:"
   puts "    --project <project>"
   puts "    --revision <revision>"
   puts "    --output <output file>"
   puts "    --mode=<sim|tcl|txt> (default: txt)"
   puts "         sim emits a script with +define+ for simulators"
   puts "         tcl emits a Quartus Tcl script that sets macros"
   puts "         txt emits a raw list of macros"
}


proc emitMacros {mode} {
  set project $::options::optionMap(--project)
  set revision $::options::optionMap(--revision)
  set output_fname $::options::optionMap(--output)

  project_open -revision $revision $project

  set ofile [open $output_fname w]

  puts $ofile "##"
  puts $ofile "## Verilog macros read from ${project} ${revision}"
  puts $ofile "##"
  puts $ofile "## Generated by emit_project_macros.tcl"
  puts $ofile "##\n"

  set macro_col [get_all_global_assignments -name VERILOG_MACRO]
  foreach_in_collection m $macro_col {
    set t [lindex $m 2]
    # Emit everything but a few macros. Skip:
    #  - OPAE_PLATFORM_GEN, which is a tag used during out-of-tree PR release creation.
    #  - PLATFORM_IF_AVAIL, which is managed by the PIM during PR builds.
    if { $t != "OPAE_PLATFORM_GEN" && ! [string match {PLATFORM_IF_AVAIL*} $t] } {
        if { $mode == "tcl" } {
          puts $ofile "set_global_assignment -name VERILOG_MACRO \"${t}\""
        } elseif { $mode == "sim" } {
          puts $ofile "+define+${t}"
        } else {
          puts $ofile $t
        }
    }
  }

  close $ofile
  project_close
}

#************************************************
# Description: Entry point of TCL post processing
#************************************************
proc main {} {
    if { [::options::ParseCMDArguments {--project --revision --output} {--mode}] == -1 } {
    PrintHelp
    return -1
  }

  # Get the mode, if specified.
  if [info exists ::options::optionMap(--mode)] {
    set mode $::options::optionMap(--mode)
  } else {
    # Default
    set mode txt
  }

  emitMacros $mode
}

main
