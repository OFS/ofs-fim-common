// Copyright 2020 Intel Corporation
// SPDX-License-Identifier: MIT

// Generated by one of Gregg's toys.   Share And Enjoy.
// Executable compiled Sep 14 2017 14:08:19
// This file was generated 08/04/2020 17:44:46

// This is a small one.  building it from simple LUTs

module prio_enc_w6_t2 #(
    parameter SIM_EMULATE = 1'b0
) (
    input clk,
    input [5:0] din,
    output [2:0] dout
);

wire [2:0] dout_w;

////////////////////////////////
// all inputs -> output[0]


generate
    if (SIM_EMULATE) begin
        wire [63:0] local_mask = 64'h4544454545444545;
        wire [5:0] local_din = {din[5],din[4],din[3],din[2],din[1],din[0]};
        assign dout_w[0] = local_mask [local_din];
    end else begin
        //Note: the S5 cell is 99% the same, and compatible
        //stratixv_lcell_comb s5c (
 
        fourteennm_lcell_comb  #(
            .lut_mask(64'h4544454545444545),
            .shared_arith("off"),
            .extended_lut("off")
        ) s10c_0 (
            .dataa (din[0]),
            .datab (din[1]),
            .datac (din[2]),
            .datad (din[3]),
            .datae (din[4]),
            .dataf (din[5]),
            .datag(1'b1),
            
            .cin(1'b1),
            
            
            // synthesis translate_off
            // this is for stratix 10 (fourteen) but not the others
            .datah(1'b1),
                        
            // this does not exist in S10, but is partially there in the models right this second
            .sharein(1'b0),
            // synthesis translate_on
            
            .sumout(),.cout(),.shareout(),
            .combout(dout_w[0])
        );
    end
endgenerate

////////////////////////////////
// all inputs -> output[1]


generate
    if (SIM_EMULATE) begin
        wire [63:0] local_mask = 64'h1110111011101111;
        wire [5:0] local_din = {din[5],din[4],din[3],din[2],din[1],din[0]};
        assign dout_w[1] = local_mask [local_din];
    end else begin
        //Note: the S5 cell is 99% the same, and compatible
        //stratixv_lcell_comb s5c (
 
        fourteennm_lcell_comb  #(
            .lut_mask(64'h1110111011101111),
            .shared_arith("off"),
            .extended_lut("off")
        ) s10c_1 (
            .dataa (din[0]),
            .datab (din[1]),
            .datac (din[2]),
            .datad (din[3]),
            .datae (din[4]),
            .dataf (din[5]),
            .datag(1'b1),
            
            .cin(1'b1),
            
            
            // synthesis translate_off
            // this is for stratix 10 (fourteen) but not the others
            .datah(1'b1),
                        
            // this does not exist in S10, but is partially there in the models right this second
            .sharein(1'b0),
            // synthesis translate_on
            
            .sumout(),.cout(),.shareout(),
            .combout(dout_w[1])
        );
    end
endgenerate

////////////////////////////////
// all inputs -> output[2]


generate
    if (SIM_EMULATE) begin
        wire [63:0] local_mask = 64'h0001000100010001;
        wire [5:0] local_din = {din[5],din[4],din[3],din[2],din[1],din[0]};
        assign dout_w[2] = local_mask [local_din];
    end else begin
        //Note: the S5 cell is 99% the same, and compatible
        //stratixv_lcell_comb s5c (
 
        fourteennm_lcell_comb  #(
            .lut_mask(64'h0001000100010001),
            .shared_arith("off"),
            .extended_lut("off")
        ) s10c_2 (
            .dataa (din[0]),
            .datab (din[1]),
            .datac (din[2]),
            .datad (din[3]),
            .datae (din[4]),
            .dataf (din[5]),
            .datag(1'b1),
            
            .cin(1'b1),
            
            
            // synthesis translate_off
            // this is for stratix 10 (fourteen) but not the others
            .datah(1'b1),
                        
            // this does not exist in S10, but is partially there in the models right this second
            .sharein(1'b0),
            // synthesis translate_on
            
            .sumout(),.cout(),.shareout(),
            .combout(dout_w[2])
        );
    end
endgenerate

////////////////////////////////
// output latency is 2

reg [2*3-1:0] dout_r;
always @(posedge clk) dout_r <= {dout_r[2:0],dout_w};
assign dout = dout_r[5:3];

endmodule

