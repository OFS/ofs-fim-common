// Copyright 2022 Intel Corporation
// SPDX-License-Identifier: MIT

// Module Name: vuart_csr
//
// BEGIN TEMPLATE
//
// *******************************************************
// *** WARNING!! ** WARNING!! ** WARNING!! ** WARNING!!***
// ***             DO NOT EDIT THIS FILE!!             ***
// *******************************************************
// This file is automatically generated from the files:
// ./vuart_csrs.ini and ./vuart_csr_template.sv using the perl
// program mk_reg_def.pl. Modify one of these files if you wish to make a change to
// this file.
//
// The mk_cfg_module_64.pl script generates these files:
//         Register Block RTL (this file) ./vuart_csr.sv
//         The Register Specification     ./vuart_csr_spec.html
//
// The input files used are:
//         register definition file       ./vuart_csrs.ini
//         Register Block Template        ./vuart_csr_template.sv
//         The perl script                ../../../../../../tools/mk_csr_module\mk_cfg_module_64.pl
//

module vuart_csr
  import ofs_csr_pkg::*;
   #(parameter TID_WIDTH   = ofs_fim_cfg_pkg::MMIO_TID_WIDTH,
     parameter ADDR_WIDTH  = ofs_fim_cfg_pkg::MMIO_ADDR_WIDTH,
     parameter DATA_WIDTH  = ofs_fim_cfg_pkg::MMIO_DATA_WIDTH,
     parameter WSTRB_WIDTH = (DATA_WIDTH/8),
     parameter HI_ADDR_BIT = 11     )(
       input wire clk_csr
       ,input wire rst_n_csr
       
       ,input logic csr_write
       ,input logic [HI_ADDR_BIT:0] csr_waddr
       ,csr_access_type_t csr_write_type
       ,input logic [DATA_WIDTH-1:0] csr_wdata
       ,input logic [WSTRB_WIDTH-1:0] csr_wstrb
       
       ,input logic csr_read
       ,input logic [ADDR_WIDTH-1:0] csr_raddr

       // #######################################################################
       // ### The following wire names are hardcoaded into the                ###
       // ### mk_cfg_module_64.pl and is used to place the final readdata on. ###
       // #######################################################################
       ,output logic [DATA_WIDTH-1:0] csr_readdata
       ,output logic csr_readdata_valid
       
       // BELOW IS A KEY PHRASE THE mk_cfg_module_64.pl
       // KEYS ON. DO NOT DELETE.
       // ***************************************
       // Start Auto generated input port list
       // ***************************************
       
       // BELOW IS A KEY PHRASE THE mk_cfg_module_64.pl
       // KEYS ON. DO NOT DELETE.
       // ***************************************
       // Start Auto generated output port list
       // ***************************************
       );
   
   
   // BELOW IS A KEY PHRASE THE mk_cfg_module_64.pl
   // KEYS ON. DO NOT DELETE.
   // ***************************************
   // Start Auto generated reg and wire decls
   // ***************************************
   logic   decode_11_8_00;
   logic   decode_11_8_01;
   logic   decode_11_8_02;
   logic   decode_11_8_03;
   logic   decode_11_8_04;
   logic   decode_11_8_05;
   logic   decode_11_8_06;
   logic   decode_11_8_07;
   logic   decode_11_8_08;
   logic   decode_11_8_09;
   logic   decode_11_8_10;
   logic   decode_11_8_11;
   logic   decode_11_8_12;
   logic   decode_11_8_13;
   logic   decode_11_8_14;
   logic   decode_11_8_15;

   // ******************************************************
   // Register 0x000 vuart_dfh
   // ******************************************************
   logic [63:00] vuart_dfh_wire;                          // Register 0x000
   logic [03:00] feature_type_reg;                        // bit(s) 63:60
   logic [07:00] dfh_version_reg;                         // bit(s) 59:52
   logic [03:00] feature_minor_rev_reg;                   // bit(s) 51:48
   logic         eol_reg;                                 // bit(s) 40:40
   logic [23:00] next_dfh_byte_offset_reg;                // bit(s) 39:16
   logic [03:00] feature_rev_reg;                         // bit(s) 15:12
   logic [11:00] feature_id_reg;                          // bit(s) 11:00


   // ******************************************************
   // Register 0x008 vuart_feature_guid_l
   // ******************************************************
   logic [63:00] vuart_feature_guid_l_wire;               // Register 0x008
   logic [63:00] feature_guid_low_reg;                    // bit(s) 63:00


   // ******************************************************
   // Register 0x010 vuart_feature_guid_h
   // ******************************************************
   logic [63:00] vuart_feature_guid_h_wire;               // Register 0x010
   logic [63:00] feature_guid_high_reg;                   // bit(s) 63:00


   // ******************************************************
   // Register 0x018 vuart_feature_csr_addr
   // ******************************************************
   logic [63:00] vuart_feature_csr_addr_wire;             // Register 0x018
   logic [62:00] csr_addr_reg;                            // bit(s) 63:01
   logic         csr_rel_reg;                             // bit(s) 00:00


   // ******************************************************
   // Register 0x020 vuart_feature_csr_size_group
   // ******************************************************
   logic [63:00] vuart_feature_csr_size_group_wire;       // Register 0x020
   logic [31:00] csr_size_reg;                            // bit(s) 63:32
   logic         has_params_reg;                          // bit(s) 31:31
   logic [14:00] grouping_id_reg;                         // bit(s) 30:16
   logic [15:00] instance_id_reg;                         // bit(s) 15:00


   // ******************************************************
   // Register 0x028 vuart_param_header_msix
   // ******************************************************
   logic [63:00] vuart_param_header_msix_wire;            // Register 0x028
   logic [31:00] header_next_reg;                         // bit(s) 63:32
   logic [15:00] header_version_reg;                      // bit(s) 31:16
   logic [15:00] header_param_id_reg;                     // bit(s) 15:00


   // ******************************************************
   // Register 0x030 vuart_param_data_msix
   // ******************************************************
   logic [63:00] vuart_param_data_msix_wire;              // Register 0x030
   logic [31:00] num_interrupts_reg;                      // bit(s) 63:32
   logic [31:00] start_vector_reg;                        // bit(s) 31:00


   // ******************************************************
   // Register 0x038 vuart_param_header_clock
   // ******************************************************
   logic [63:00] vuart_param_header_clock_wire;           // Register 0x038
   logic [31:00] clock_next_reg;                          // bit(s) 63:32
   logic [15:00] clock_version_reg;                       // bit(s) 31:16
   logic [15:00] clock_param_id_reg;                      // bit(s) 15:00


   // ******************************************************
   // Register 0x040 vuart_param_data_clock
   // ******************************************************
   logic [63:00] vuart_param_data_clock_wire;             // Register 0x040
   logic [63:00] input_clock_reg;                         // bit(s) 63:00


   // ******************************************************
   // Register 0x048 uart_param_header_fifo
   // ******************************************************
   logic [63:00] uart_param_header_fifo_wire;             // Register 0x048
   logic [31:00] header_fifo_next_reg;                    // bit(s) 63:32
   logic [15:00] header_fifo_version_reg;                 // bit(s) 31:16
   logic [15:00] header_fifo_param_id_reg;                // bit(s) 15:00


   // ******************************************************
   // Register 0x050 vuart_param_data_fifo
   // ******************************************************
   logic [63:00] vuart_param_data_fifo_wire;              // Register 0x050
   logic [63:00] fifo_len_reg;                            // bit(s) 63:00


   // ******************************************************
   // Register 0x058 param_header_layout
   // ******************************************************
   logic [63:00] param_header_layout_wire;                // Register 0x058
   logic [31:00] header_layout_next_reg;                  // bit(s) 63:32
   logic [15:00] header_layout_version_reg;               // bit(s) 31:16
   logic [15:00] header_layout_param_id_reg;              // bit(s) 15:00


   // ******************************************************
   // Register 0x060 param_data_fifo
   // ******************************************************
   logic [63:00] param_data_fifo_wire;                    // Register 0x060
   logic [31:00] reg_io_width_reg;                        // bit(s) 63:32
   logic [31:00] reg_shift_reg;                           // bit(s) 31:00


   // ******************************************************
   // Register 0x0f0 vuart_scratchpad
   // ******************************************************
   logic [63:00] vuart_scratchpad_wire;                   // Register 0x0f0
   logic [63:00] scratchpad_reg;                          // bit(s) 63:00

   logic         rd_or_wr_r2;

   // *****************************************************
   // Logic declairs for the 8 bit "register" decode nets.
   // *****************************************************
   logic         vuart_dfh_en_r3;
   logic         vuart_feature_guid_l_en_r3;
   logic         vuart_feature_guid_h_en_r3;
   logic         vuart_feature_csr_addr_en_r3;
   logic         vuart_feature_csr_size_group_en_r3;
   logic         vuart_param_header_msix_en_r3;
   logic         vuart_param_data_msix_en_r3;
   logic         vuart_param_header_clock_en_r3;
   logic         vuart_param_data_clock_en_r3;
   logic         uart_param_header_fifo_en_r3;
   logic         vuart_param_data_fifo_en_r3;
   logic         param_header_layout_en_r3;
   logic         param_data_fifo_en_r3;
   logic         vuart_scratchpad_en_r3;
   logic [63:00] csr_decode_mux_r4;
   // ******************************************************
   // *declair logics that are terms but not ports.
   // ******************************************************
   // ******************************************************
   // *default reset value wires..
   // ******************************************************
  logic   [03:00] feature_type_default = 4'h3;
  logic   [07:00] dfh_version_default = 8'h1;
  logic   [03:00] feature_minor_rev_default = 4'h0;
  logic           eol_default = 1'b0;
  logic   [23:00] next_dfh_byte_offset_default = 24'h10000;
  logic   [03:00] feature_rev_default = 4'h0;
  logic   [11:00] feature_id_default = 12'h24;
  logic   [63:00] feature_guid_low_default = 64'hE1DF0D4ACE8E486C;
  logic   [63:00] feature_guid_high_default = 64'h9E6641A6CA26CC04;
  logic   [62:00] csr_addr_default = 63'h200;
  logic           csr_rel_default = 1'b0;
  logic   [31:00] csr_size_default = 32'h10;
  logic           has_params_default = 1'b1;
  logic   [14:00] grouping_id_default = 15'h0;
  logic   [15:00] instance_id_default = 16'h0;
  logic   [31:00] header_next_default = 32'h10;
  logic   [15:00] header_version_default = 16'h0;
  logic   [15:00] header_param_id_default = 16'h1;
  logic   [31:00] num_interrupts_default = 32'h1;
  logic   [31:00] start_vector_default = 32'h5;
  logic   [31:00] clock_next_default = 32'h10;
  logic   [15:00] clock_version_default = 16'h0;
  logic   [15:00] clock_param_id_default = 16'h2;
  logic   [63:00] input_clock_default = 64'h2FAF080;
  logic   [31:00] header_fifo_next_default = 32'h10;
  logic   [15:00] header_fifo_version_default = 16'h0;
  logic   [15:00] header_fifo_param_id_default = 16'h3;
  logic   [63:00] fifo_len_default = 64'h80;
  logic   [31:00] header_layout_next_default = 32'h11;
  logic   [15:00] header_layout_version_default = 16'h0;
  logic   [15:00] header_layout_param_id_default = 16'h4;
  logic   [31:00] reg_io_width_default = 32'h4;
  logic   [31:00] reg_shift_default = 32'h2;
  logic   [63:00] scratchpad_default = 64'h0;
   
   // ***************************************
   // Start Manual reg and wire decls
   // ***************************************
   
   logic [7:0] byte_en_r3;
   csr_access_type_t       csr_write_type_r1;
   csr_access_type_t       csr_write_type_r2;
   
   logic [HI_ADDR_BIT:02]   csr_addr_r1;
   logic [07:02]            csr_addr_r2;
   logic                    csr_write_r1;
   logic                    csr_write_r2;
   logic                    core_reg_we_r3;
   logic [63:0]             csr_regwr_data_r1;
   logic [63:0]             csr_regwr_data_r2;
   logic [63:0]             csr_regwr_data_r3;
   
   logic                    csr_read_r1;
   logic                    csr_read_r2;
   logic                    csr_read_done_pulse_r2;
   logic                    csr_read_done_pulse_r3;
   logic                    csr_read_done_pulse_r4;
   
   // ######################################################################################
   // ### The wire below (rd_or_wr_r1) is a pulse used by the mk_cfg_module_64.pl script ###
   // ######################################################################################
   logic                    rd_or_wr_r1;
   
   // ***************************************
   // Start Manual RTL Coading
   // ***************************************
   
   always @(posedge clk_csr) begin
      // Note, "csr_addr_r1" is used by mk_cfg_module_64.pl
      csr_addr_r1             <= (csr_read ? csr_raddr[HI_ADDR_BIT:2] : csr_write ? csr_waddr[HI_ADDR_BIT:2] : csr_addr_r1);
      csr_addr_r2             <= csr_addr_r1[07:02]; // csr_addr_r2 used my mk_cfg_module_64.pl 
      csr_write_r1            <= csr_write & rst_n_csr;
      csr_write_r2            <= csr_write_r1;
      core_reg_we_r3          <= csr_write_r2; // high fanout net Keep simple for quartus replication.
      csr_regwr_data_r1       <= csr_wdata;
      csr_regwr_data_r2       <= csr_regwr_data_r1;
      csr_regwr_data_r3       <= csr_regwr_data_r2;
      csr_read_r1             <= csr_read & ~csr_readdata_valid;
      csr_read_r2             <= csr_read_r1;
      csr_read_done_pulse_r2  <= csr_read_r1 & ~csr_read_r2;
      csr_read_done_pulse_r3  <= csr_read_done_pulse_r2;
      csr_read_done_pulse_r4  <= csr_read_done_pulse_r3;
      csr_readdata_valid      <= csr_read_done_pulse_r4;
      
      csr_write_type_r1       <= csr_write_type;
      csr_write_type_r2       <= csr_write_type_r1;
      
      if (csr_write_type_r2 == ofs_csr_pkg::UPPER32) begin
         byte_en_r3 <= 8'hF0;
      end else if (csr_write_type_r2 == ofs_csr_pkg::LOWER32) begin
         byte_en_r3 <= 8'h0F;
      end else if (csr_write_type_r2 == ofs_csr_pkg::FULL64) begin
         byte_en_r3 <= 8'hFF;
      end else begin
         byte_en_r3 <= 8'h00;
      end
   end // always @ (posedge clk_csr)

   // ######################################################################################
   // ### The wire below (rd_or_wr_r1) is a pulse used by the mk_cfg_module_64.pl script ###
   // ######################################################################################
   assign rd_or_wr_r1 = csr_read_r1 & ~csr_read_r2
                      | csr_write_r1 & ~csr_write_r2;
   
   
   // BELOW IS A KEY PHRASE THE mk_cfg_module_64.pl
   // KEYS ON. DO NOT DELETE.
   // ***************************************
   // Start Auto generated rtl code
   // ***************************************
   always @(posedge clk_csr) begin
      rd_or_wr_r2 <= rd_or_wr_r1;
   end
   always @(posedge clk_csr) begin
      decode_11_8_00 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h00);
      decode_11_8_01 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h01);
      decode_11_8_02 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h02);
      decode_11_8_03 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h03);
      decode_11_8_04 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h04);
      decode_11_8_05 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h05);
      decode_11_8_06 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h06);
      decode_11_8_07 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h07);
      decode_11_8_08 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h08);
      decode_11_8_09 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h09);
      decode_11_8_10 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0A);
      decode_11_8_11 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0B);
      decode_11_8_12 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0C);
      decode_11_8_13 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0D);
      decode_11_8_14 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0E);
      decode_11_8_15 <= rd_or_wr_r1 & (csr_addr_r1[11:08] == 4'h0F);
   end

// *****************************************************
// RTL for the 5 bit "register" decode.
// *****************************************************
  always @(posedge clk_csr) begin
      vuart_dfh_en_r3                     <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00000); // Decode for register 0x000
      vuart_feature_guid_l_en_r3          <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00001); // Decode for register 0x008
      vuart_feature_guid_h_en_r3          <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00010); // Decode for register 0x010
      vuart_feature_csr_addr_en_r3        <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00011); // Decode for register 0x018
      vuart_feature_csr_size_group_en_r3  <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00100); // Decode for register 0x020
      vuart_param_header_msix_en_r3       <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00101); // Decode for register 0x028
      vuart_param_data_msix_en_r3         <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00110); // Decode for register 0x030
      vuart_param_header_clock_en_r3      <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b00111); // Decode for register 0x038
      vuart_param_data_clock_en_r3        <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b01000); // Decode for register 0x040
      uart_param_header_fifo_en_r3        <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b01001); // Decode for register 0x048
      vuart_param_data_fifo_en_r3         <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b01010); // Decode for register 0x050
      param_header_layout_en_r3           <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b01011); // Decode for register 0x058
      param_data_fifo_en_r3               <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b01100); // Decode for register 0x060
      vuart_scratchpad_en_r3              <= rd_or_wr_r2 & decode_11_8_00 & (csr_addr_r2[07:03] == 5'b11110); // Decode for register 0x0f0
   end

// *****************************************************
// Start RTL for each bit and assign the 64 bit wire
// *****************************************************
// ******************************************************
// Register 0x000 vuart_dfh
// ******************************************************
// ******************************************************
// Bit(s) 63:60 (feature_type) of Register 0x000 vuart_dfh
// ******************************************************
assign feature_type_reg[03:00] = feature_type_default[03:00];
// ******************************************************
// Bit(s) 59:52 (dfh_version) of Register 0x000 vuart_dfh
// ******************************************************
assign dfh_version_reg[07:04] = dfh_version_default[07:04];
// ******************************************************
// Bit(s) 59:52 (dfh_version) of Register 0x000 vuart_dfh
// ******************************************************
assign dfh_version_reg[03:00] = dfh_version_default[03:00];
// ******************************************************
// Bit(s) 51:48 (feature_minor_rev) of Register 0x000 vuart_dfh
// ******************************************************
assign feature_minor_rev_reg[03:00] = feature_minor_rev_default[03:00];
// ******************************************************
// Bit(s) 40:40 (eol) of Register 0x000 vuart_dfh
// ******************************************************
assign eol_reg = eol_default;
// ******************************************************
// Bit(s) 39:16 (next_dfh_byte_offset) of Register 0x000 vuart_dfh
// ******************************************************
assign next_dfh_byte_offset_reg[23:16] = next_dfh_byte_offset_default[23:16];
// ******************************************************
// Bit(s) 39:16 (next_dfh_byte_offset) of Register 0x000 vuart_dfh
// ******************************************************
assign next_dfh_byte_offset_reg[15:08] = next_dfh_byte_offset_default[15:08];
// ******************************************************
// Bit(s) 39:16 (next_dfh_byte_offset) of Register 0x000 vuart_dfh
// ******************************************************
assign next_dfh_byte_offset_reg[07:00] = next_dfh_byte_offset_default[07:00];
// ******************************************************
// Bit(s) 15:12 (feature_rev) of Register 0x000 vuart_dfh
// ******************************************************
assign feature_rev_reg[03:00] = feature_rev_default[03:00];
// ******************************************************
// Bit(s) 11:00 (feature_id) of Register 0x000 vuart_dfh
// ******************************************************
assign feature_id_reg[11:08] = feature_id_default[11:08];
// ******************************************************
// Bit(s) 11:00 (feature_id) of Register 0x000 vuart_dfh
// ******************************************************
assign feature_id_reg[07:00] = feature_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_dfh_wire = {
  feature_type_reg[03]               , feature_type_reg[02]               , feature_type_reg[01]               , feature_type_reg[00]               
, dfh_version_reg[07]                , dfh_version_reg[06]                , dfh_version_reg[05]                , dfh_version_reg[04]                
, dfh_version_reg[03]                , dfh_version_reg[02]                , dfh_version_reg[01]                , dfh_version_reg[00]                
, feature_minor_rev_reg[03]          , feature_minor_rev_reg[02]          , feature_minor_rev_reg[01]          , feature_minor_rev_reg[00]          
, 1'b0                               , 1'b0                               , 1'b0                               , 1'b0                               
, 1'b0                               , 1'b0                               , 1'b0                               , eol_reg                            
, next_dfh_byte_offset_reg[23]       , next_dfh_byte_offset_reg[22]       , next_dfh_byte_offset_reg[21]       , next_dfh_byte_offset_reg[20]       
, next_dfh_byte_offset_reg[19]       , next_dfh_byte_offset_reg[18]       , next_dfh_byte_offset_reg[17]       , next_dfh_byte_offset_reg[16]       
, next_dfh_byte_offset_reg[15]       , next_dfh_byte_offset_reg[14]       , next_dfh_byte_offset_reg[13]       , next_dfh_byte_offset_reg[12]       
, next_dfh_byte_offset_reg[11]       , next_dfh_byte_offset_reg[10]       , next_dfh_byte_offset_reg[09]       , next_dfh_byte_offset_reg[08]       
, next_dfh_byte_offset_reg[07]       , next_dfh_byte_offset_reg[06]       , next_dfh_byte_offset_reg[05]       , next_dfh_byte_offset_reg[04]       
, next_dfh_byte_offset_reg[03]       , next_dfh_byte_offset_reg[02]       , next_dfh_byte_offset_reg[01]       , next_dfh_byte_offset_reg[00]       
, feature_rev_reg[03]                , feature_rev_reg[02]                , feature_rev_reg[01]                , feature_rev_reg[00]                
, feature_id_reg[11]                 , feature_id_reg[10]                 , feature_id_reg[09]                 , feature_id_reg[08]                 
, feature_id_reg[07]                 , feature_id_reg[06]                 , feature_id_reg[05]                 , feature_id_reg[04]                 
, feature_id_reg[03]                 , feature_id_reg[02]                 , feature_id_reg[01]                 , feature_id_reg[00]                 };

// ******************************************************
// Register 0x008 vuart_feature_guid_l
// ******************************************************
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[63:56] = feature_guid_low_default[63:56];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[55:48] = feature_guid_low_default[55:48];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[47:40] = feature_guid_low_default[47:40];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[39:32] = feature_guid_low_default[39:32];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[31:24] = feature_guid_low_default[31:24];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[23:16] = feature_guid_low_default[23:16];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[15:08] = feature_guid_low_default[15:08];
// ******************************************************
// Bit(s) 63:00 (feature_guid_low) of Register 0x008 vuart_feature_guid_l
// ******************************************************
assign feature_guid_low_reg[07:00] = feature_guid_low_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_feature_guid_l_wire = {
  feature_guid_low_reg[63]           , feature_guid_low_reg[62]           , feature_guid_low_reg[61]           , feature_guid_low_reg[60]           
, feature_guid_low_reg[59]           , feature_guid_low_reg[58]           , feature_guid_low_reg[57]           , feature_guid_low_reg[56]           
, feature_guid_low_reg[55]           , feature_guid_low_reg[54]           , feature_guid_low_reg[53]           , feature_guid_low_reg[52]           
, feature_guid_low_reg[51]           , feature_guid_low_reg[50]           , feature_guid_low_reg[49]           , feature_guid_low_reg[48]           
, feature_guid_low_reg[47]           , feature_guid_low_reg[46]           , feature_guid_low_reg[45]           , feature_guid_low_reg[44]           
, feature_guid_low_reg[43]           , feature_guid_low_reg[42]           , feature_guid_low_reg[41]           , feature_guid_low_reg[40]           
, feature_guid_low_reg[39]           , feature_guid_low_reg[38]           , feature_guid_low_reg[37]           , feature_guid_low_reg[36]           
, feature_guid_low_reg[35]           , feature_guid_low_reg[34]           , feature_guid_low_reg[33]           , feature_guid_low_reg[32]           
, feature_guid_low_reg[31]           , feature_guid_low_reg[30]           , feature_guid_low_reg[29]           , feature_guid_low_reg[28]           
, feature_guid_low_reg[27]           , feature_guid_low_reg[26]           , feature_guid_low_reg[25]           , feature_guid_low_reg[24]           
, feature_guid_low_reg[23]           , feature_guid_low_reg[22]           , feature_guid_low_reg[21]           , feature_guid_low_reg[20]           
, feature_guid_low_reg[19]           , feature_guid_low_reg[18]           , feature_guid_low_reg[17]           , feature_guid_low_reg[16]           
, feature_guid_low_reg[15]           , feature_guid_low_reg[14]           , feature_guid_low_reg[13]           , feature_guid_low_reg[12]           
, feature_guid_low_reg[11]           , feature_guid_low_reg[10]           , feature_guid_low_reg[09]           , feature_guid_low_reg[08]           
, feature_guid_low_reg[07]           , feature_guid_low_reg[06]           , feature_guid_low_reg[05]           , feature_guid_low_reg[04]           
, feature_guid_low_reg[03]           , feature_guid_low_reg[02]           , feature_guid_low_reg[01]           , feature_guid_low_reg[00]           };

// ******************************************************
// Register 0x010 vuart_feature_guid_h
// ******************************************************
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[63:56] = feature_guid_high_default[63:56];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[55:48] = feature_guid_high_default[55:48];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[47:40] = feature_guid_high_default[47:40];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[39:32] = feature_guid_high_default[39:32];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[31:24] = feature_guid_high_default[31:24];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[23:16] = feature_guid_high_default[23:16];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[15:08] = feature_guid_high_default[15:08];
// ******************************************************
// Bit(s) 63:00 (feature_guid_high) of Register 0x010 vuart_feature_guid_h
// ******************************************************
assign feature_guid_high_reg[07:00] = feature_guid_high_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_feature_guid_h_wire = {
  feature_guid_high_reg[63]          , feature_guid_high_reg[62]          , feature_guid_high_reg[61]          , feature_guid_high_reg[60]          
, feature_guid_high_reg[59]          , feature_guid_high_reg[58]          , feature_guid_high_reg[57]          , feature_guid_high_reg[56]          
, feature_guid_high_reg[55]          , feature_guid_high_reg[54]          , feature_guid_high_reg[53]          , feature_guid_high_reg[52]          
, feature_guid_high_reg[51]          , feature_guid_high_reg[50]          , feature_guid_high_reg[49]          , feature_guid_high_reg[48]          
, feature_guid_high_reg[47]          , feature_guid_high_reg[46]          , feature_guid_high_reg[45]          , feature_guid_high_reg[44]          
, feature_guid_high_reg[43]          , feature_guid_high_reg[42]          , feature_guid_high_reg[41]          , feature_guid_high_reg[40]          
, feature_guid_high_reg[39]          , feature_guid_high_reg[38]          , feature_guid_high_reg[37]          , feature_guid_high_reg[36]          
, feature_guid_high_reg[35]          , feature_guid_high_reg[34]          , feature_guid_high_reg[33]          , feature_guid_high_reg[32]          
, feature_guid_high_reg[31]          , feature_guid_high_reg[30]          , feature_guid_high_reg[29]          , feature_guid_high_reg[28]          
, feature_guid_high_reg[27]          , feature_guid_high_reg[26]          , feature_guid_high_reg[25]          , feature_guid_high_reg[24]          
, feature_guid_high_reg[23]          , feature_guid_high_reg[22]          , feature_guid_high_reg[21]          , feature_guid_high_reg[20]          
, feature_guid_high_reg[19]          , feature_guid_high_reg[18]          , feature_guid_high_reg[17]          , feature_guid_high_reg[16]          
, feature_guid_high_reg[15]          , feature_guid_high_reg[14]          , feature_guid_high_reg[13]          , feature_guid_high_reg[12]          
, feature_guid_high_reg[11]          , feature_guid_high_reg[10]          , feature_guid_high_reg[09]          , feature_guid_high_reg[08]          
, feature_guid_high_reg[07]          , feature_guid_high_reg[06]          , feature_guid_high_reg[05]          , feature_guid_high_reg[04]          
, feature_guid_high_reg[03]          , feature_guid_high_reg[02]          , feature_guid_high_reg[01]          , feature_guid_high_reg[00]          };

// ******************************************************
// Register 0x018 vuart_feature_csr_addr
// ******************************************************
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[62:55] = csr_addr_default[62:55];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[54:47] = csr_addr_default[54:47];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[46:39] = csr_addr_default[46:39];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[38:31] = csr_addr_default[38:31];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[30:23] = csr_addr_default[30:23];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[22:15] = csr_addr_default[22:15];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[14:07] = csr_addr_default[14:07];
// ******************************************************
// Bit(s) 63:01 (csr_addr) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_addr_reg[06:00] = csr_addr_default[06:00];
// ******************************************************
// Bit(s) 00:00 (csr_rel) of Register 0x018 vuart_feature_csr_addr
// ******************************************************
assign csr_rel_reg = csr_rel_default;

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_feature_csr_addr_wire = {
  csr_addr_reg[62]                   , csr_addr_reg[61]                   , csr_addr_reg[60]                   , csr_addr_reg[59]                   
, csr_addr_reg[58]                   , csr_addr_reg[57]                   , csr_addr_reg[56]                   , csr_addr_reg[55]                   
, csr_addr_reg[54]                   , csr_addr_reg[53]                   , csr_addr_reg[52]                   , csr_addr_reg[51]                   
, csr_addr_reg[50]                   , csr_addr_reg[49]                   , csr_addr_reg[48]                   , csr_addr_reg[47]                   
, csr_addr_reg[46]                   , csr_addr_reg[45]                   , csr_addr_reg[44]                   , csr_addr_reg[43]                   
, csr_addr_reg[42]                   , csr_addr_reg[41]                   , csr_addr_reg[40]                   , csr_addr_reg[39]                   
, csr_addr_reg[38]                   , csr_addr_reg[37]                   , csr_addr_reg[36]                   , csr_addr_reg[35]                   
, csr_addr_reg[34]                   , csr_addr_reg[33]                   , csr_addr_reg[32]                   , csr_addr_reg[31]                   
, csr_addr_reg[30]                   , csr_addr_reg[29]                   , csr_addr_reg[28]                   , csr_addr_reg[27]                   
, csr_addr_reg[26]                   , csr_addr_reg[25]                   , csr_addr_reg[24]                   , csr_addr_reg[23]                   
, csr_addr_reg[22]                   , csr_addr_reg[21]                   , csr_addr_reg[20]                   , csr_addr_reg[19]                   
, csr_addr_reg[18]                   , csr_addr_reg[17]                   , csr_addr_reg[16]                   , csr_addr_reg[15]                   
, csr_addr_reg[14]                   , csr_addr_reg[13]                   , csr_addr_reg[12]                   , csr_addr_reg[11]                   
, csr_addr_reg[10]                   , csr_addr_reg[09]                   , csr_addr_reg[08]                   , csr_addr_reg[07]                   
, csr_addr_reg[06]                   , csr_addr_reg[05]                   , csr_addr_reg[04]                   , csr_addr_reg[03]                   
, csr_addr_reg[02]                   , csr_addr_reg[01]                   , csr_addr_reg[00]                   , csr_rel_reg                        };

// ******************************************************
// Register 0x020 vuart_feature_csr_size_group
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (csr_size) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign csr_size_reg[31:24] = csr_size_default[31:24];
// ******************************************************
// Bit(s) 63:32 (csr_size) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign csr_size_reg[23:16] = csr_size_default[23:16];
// ******************************************************
// Bit(s) 63:32 (csr_size) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign csr_size_reg[15:08] = csr_size_default[15:08];
// ******************************************************
// Bit(s) 63:32 (csr_size) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign csr_size_reg[07:00] = csr_size_default[07:00];
// ******************************************************
// Bit(s) 31:31 (has_params) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign has_params_reg = has_params_default;
// ******************************************************
// Bit(s) 30:16 (grouping_id) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign grouping_id_reg[14:08] = grouping_id_default[14:08];
// ******************************************************
// Bit(s) 30:16 (grouping_id) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign grouping_id_reg[07:00] = grouping_id_default[07:00];
// ******************************************************
// Bit(s) 15:00 (instance_id) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign instance_id_reg[15:08] = instance_id_default[15:08];
// ******************************************************
// Bit(s) 15:00 (instance_id) of Register 0x020 vuart_feature_csr_size_group
// ******************************************************
assign instance_id_reg[07:00] = instance_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_feature_csr_size_group_wire = {
  csr_size_reg[31]                   , csr_size_reg[30]                   , csr_size_reg[29]                   , csr_size_reg[28]                   
, csr_size_reg[27]                   , csr_size_reg[26]                   , csr_size_reg[25]                   , csr_size_reg[24]                   
, csr_size_reg[23]                   , csr_size_reg[22]                   , csr_size_reg[21]                   , csr_size_reg[20]                   
, csr_size_reg[19]                   , csr_size_reg[18]                   , csr_size_reg[17]                   , csr_size_reg[16]                   
, csr_size_reg[15]                   , csr_size_reg[14]                   , csr_size_reg[13]                   , csr_size_reg[12]                   
, csr_size_reg[11]                   , csr_size_reg[10]                   , csr_size_reg[09]                   , csr_size_reg[08]                   
, csr_size_reg[07]                   , csr_size_reg[06]                   , csr_size_reg[05]                   , csr_size_reg[04]                   
, csr_size_reg[03]                   , csr_size_reg[02]                   , csr_size_reg[01]                   , csr_size_reg[00]                   
, has_params_reg                     , grouping_id_reg[14]                , grouping_id_reg[13]                , grouping_id_reg[12]                
, grouping_id_reg[11]                , grouping_id_reg[10]                , grouping_id_reg[09]                , grouping_id_reg[08]                
, grouping_id_reg[07]                , grouping_id_reg[06]                , grouping_id_reg[05]                , grouping_id_reg[04]                
, grouping_id_reg[03]                , grouping_id_reg[02]                , grouping_id_reg[01]                , grouping_id_reg[00]                
, instance_id_reg[15]                , instance_id_reg[14]                , instance_id_reg[13]                , instance_id_reg[12]                
, instance_id_reg[11]                , instance_id_reg[10]                , instance_id_reg[09]                , instance_id_reg[08]                
, instance_id_reg[07]                , instance_id_reg[06]                , instance_id_reg[05]                , instance_id_reg[04]                
, instance_id_reg[03]                , instance_id_reg[02]                , instance_id_reg[01]                , instance_id_reg[00]                };

// ******************************************************
// Register 0x028 vuart_param_header_msix
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (header_next) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_next_reg[31:24] = header_next_default[31:24];
// ******************************************************
// Bit(s) 63:32 (header_next) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_next_reg[23:16] = header_next_default[23:16];
// ******************************************************
// Bit(s) 63:32 (header_next) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_next_reg[15:08] = header_next_default[15:08];
// ******************************************************
// Bit(s) 63:32 (header_next) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_next_reg[07:00] = header_next_default[07:00];
// ******************************************************
// Bit(s) 31:16 (header_version) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_version_reg[15:08] = header_version_default[15:08];
// ******************************************************
// Bit(s) 31:16 (header_version) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_version_reg[07:00] = header_version_default[07:00];
// ******************************************************
// Bit(s) 15:00 (header_param_id) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_param_id_reg[15:08] = header_param_id_default[15:08];
// ******************************************************
// Bit(s) 15:00 (header_param_id) of Register 0x028 vuart_param_header_msix
// ******************************************************
assign header_param_id_reg[07:00] = header_param_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_param_header_msix_wire = {
  header_next_reg[31]                , header_next_reg[30]                , header_next_reg[29]                , header_next_reg[28]                
, header_next_reg[27]                , header_next_reg[26]                , header_next_reg[25]                , header_next_reg[24]                
, header_next_reg[23]                , header_next_reg[22]                , header_next_reg[21]                , header_next_reg[20]                
, header_next_reg[19]                , header_next_reg[18]                , header_next_reg[17]                , header_next_reg[16]                
, header_next_reg[15]                , header_next_reg[14]                , header_next_reg[13]                , header_next_reg[12]                
, header_next_reg[11]                , header_next_reg[10]                , header_next_reg[09]                , header_next_reg[08]                
, header_next_reg[07]                , header_next_reg[06]                , header_next_reg[05]                , header_next_reg[04]                
, header_next_reg[03]                , header_next_reg[02]                , header_next_reg[01]                , header_next_reg[00]                
, header_version_reg[15]             , header_version_reg[14]             , header_version_reg[13]             , header_version_reg[12]             
, header_version_reg[11]             , header_version_reg[10]             , header_version_reg[09]             , header_version_reg[08]             
, header_version_reg[07]             , header_version_reg[06]             , header_version_reg[05]             , header_version_reg[04]             
, header_version_reg[03]             , header_version_reg[02]             , header_version_reg[01]             , header_version_reg[00]             
, header_param_id_reg[15]            , header_param_id_reg[14]            , header_param_id_reg[13]            , header_param_id_reg[12]            
, header_param_id_reg[11]            , header_param_id_reg[10]            , header_param_id_reg[09]            , header_param_id_reg[08]            
, header_param_id_reg[07]            , header_param_id_reg[06]            , header_param_id_reg[05]            , header_param_id_reg[04]            
, header_param_id_reg[03]            , header_param_id_reg[02]            , header_param_id_reg[01]            , header_param_id_reg[00]            };

// ******************************************************
// Register 0x030 vuart_param_data_msix
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (num_interrupts) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign num_interrupts_reg[31:24] = num_interrupts_default[31:24];
// ******************************************************
// Bit(s) 63:32 (num_interrupts) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign num_interrupts_reg[23:16] = num_interrupts_default[23:16];
// ******************************************************
// Bit(s) 63:32 (num_interrupts) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign num_interrupts_reg[15:08] = num_interrupts_default[15:08];
// ******************************************************
// Bit(s) 63:32 (num_interrupts) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign num_interrupts_reg[07:00] = num_interrupts_default[07:00];
// ******************************************************
// Bit(s) 31:00 (start_vector) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign start_vector_reg[31:24] = start_vector_default[31:24];
// ******************************************************
// Bit(s) 31:00 (start_vector) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign start_vector_reg[23:16] = start_vector_default[23:16];
// ******************************************************
// Bit(s) 31:00 (start_vector) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign start_vector_reg[15:08] = start_vector_default[15:08];
// ******************************************************
// Bit(s) 31:00 (start_vector) of Register 0x030 vuart_param_data_msix
// ******************************************************
assign start_vector_reg[07:00] = start_vector_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_param_data_msix_wire = {
  num_interrupts_reg[31]             , num_interrupts_reg[30]             , num_interrupts_reg[29]             , num_interrupts_reg[28]             
, num_interrupts_reg[27]             , num_interrupts_reg[26]             , num_interrupts_reg[25]             , num_interrupts_reg[24]             
, num_interrupts_reg[23]             , num_interrupts_reg[22]             , num_interrupts_reg[21]             , num_interrupts_reg[20]             
, num_interrupts_reg[19]             , num_interrupts_reg[18]             , num_interrupts_reg[17]             , num_interrupts_reg[16]             
, num_interrupts_reg[15]             , num_interrupts_reg[14]             , num_interrupts_reg[13]             , num_interrupts_reg[12]             
, num_interrupts_reg[11]             , num_interrupts_reg[10]             , num_interrupts_reg[09]             , num_interrupts_reg[08]             
, num_interrupts_reg[07]             , num_interrupts_reg[06]             , num_interrupts_reg[05]             , num_interrupts_reg[04]             
, num_interrupts_reg[03]             , num_interrupts_reg[02]             , num_interrupts_reg[01]             , num_interrupts_reg[00]             
, start_vector_reg[31]               , start_vector_reg[30]               , start_vector_reg[29]               , start_vector_reg[28]               
, start_vector_reg[27]               , start_vector_reg[26]               , start_vector_reg[25]               , start_vector_reg[24]               
, start_vector_reg[23]               , start_vector_reg[22]               , start_vector_reg[21]               , start_vector_reg[20]               
, start_vector_reg[19]               , start_vector_reg[18]               , start_vector_reg[17]               , start_vector_reg[16]               
, start_vector_reg[15]               , start_vector_reg[14]               , start_vector_reg[13]               , start_vector_reg[12]               
, start_vector_reg[11]               , start_vector_reg[10]               , start_vector_reg[09]               , start_vector_reg[08]               
, start_vector_reg[07]               , start_vector_reg[06]               , start_vector_reg[05]               , start_vector_reg[04]               
, start_vector_reg[03]               , start_vector_reg[02]               , start_vector_reg[01]               , start_vector_reg[00]               };

// ******************************************************
// Register 0x038 vuart_param_header_clock
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (clock_next) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_next_reg[31:24] = clock_next_default[31:24];
// ******************************************************
// Bit(s) 63:32 (clock_next) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_next_reg[23:16] = clock_next_default[23:16];
// ******************************************************
// Bit(s) 63:32 (clock_next) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_next_reg[15:08] = clock_next_default[15:08];
// ******************************************************
// Bit(s) 63:32 (clock_next) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_next_reg[07:00] = clock_next_default[07:00];
// ******************************************************
// Bit(s) 31:16 (clock_version) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_version_reg[15:08] = clock_version_default[15:08];
// ******************************************************
// Bit(s) 31:16 (clock_version) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_version_reg[07:00] = clock_version_default[07:00];
// ******************************************************
// Bit(s) 15:00 (clock_param_id) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_param_id_reg[15:08] = clock_param_id_default[15:08];
// ******************************************************
// Bit(s) 15:00 (clock_param_id) of Register 0x038 vuart_param_header_clock
// ******************************************************
assign clock_param_id_reg[07:00] = clock_param_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_param_header_clock_wire = {
  clock_next_reg[31]                 , clock_next_reg[30]                 , clock_next_reg[29]                 , clock_next_reg[28]                 
, clock_next_reg[27]                 , clock_next_reg[26]                 , clock_next_reg[25]                 , clock_next_reg[24]                 
, clock_next_reg[23]                 , clock_next_reg[22]                 , clock_next_reg[21]                 , clock_next_reg[20]                 
, clock_next_reg[19]                 , clock_next_reg[18]                 , clock_next_reg[17]                 , clock_next_reg[16]                 
, clock_next_reg[15]                 , clock_next_reg[14]                 , clock_next_reg[13]                 , clock_next_reg[12]                 
, clock_next_reg[11]                 , clock_next_reg[10]                 , clock_next_reg[09]                 , clock_next_reg[08]                 
, clock_next_reg[07]                 , clock_next_reg[06]                 , clock_next_reg[05]                 , clock_next_reg[04]                 
, clock_next_reg[03]                 , clock_next_reg[02]                 , clock_next_reg[01]                 , clock_next_reg[00]                 
, clock_version_reg[15]              , clock_version_reg[14]              , clock_version_reg[13]              , clock_version_reg[12]              
, clock_version_reg[11]              , clock_version_reg[10]              , clock_version_reg[09]              , clock_version_reg[08]              
, clock_version_reg[07]              , clock_version_reg[06]              , clock_version_reg[05]              , clock_version_reg[04]              
, clock_version_reg[03]              , clock_version_reg[02]              , clock_version_reg[01]              , clock_version_reg[00]              
, clock_param_id_reg[15]             , clock_param_id_reg[14]             , clock_param_id_reg[13]             , clock_param_id_reg[12]             
, clock_param_id_reg[11]             , clock_param_id_reg[10]             , clock_param_id_reg[09]             , clock_param_id_reg[08]             
, clock_param_id_reg[07]             , clock_param_id_reg[06]             , clock_param_id_reg[05]             , clock_param_id_reg[04]             
, clock_param_id_reg[03]             , clock_param_id_reg[02]             , clock_param_id_reg[01]             , clock_param_id_reg[00]             };

// ******************************************************
// Register 0x040 vuart_param_data_clock
// ******************************************************
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[63:56] = input_clock_default[63:56];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[55:48] = input_clock_default[55:48];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[47:40] = input_clock_default[47:40];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[39:32] = input_clock_default[39:32];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[31:24] = input_clock_default[31:24];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[23:16] = input_clock_default[23:16];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[15:08] = input_clock_default[15:08];
// ******************************************************
// Bit(s) 63:00 (input_clock) of Register 0x040 vuart_param_data_clock
// ******************************************************
assign input_clock_reg[07:00] = input_clock_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_param_data_clock_wire = {
  input_clock_reg[63]                , input_clock_reg[62]                , input_clock_reg[61]                , input_clock_reg[60]                
, input_clock_reg[59]                , input_clock_reg[58]                , input_clock_reg[57]                , input_clock_reg[56]                
, input_clock_reg[55]                , input_clock_reg[54]                , input_clock_reg[53]                , input_clock_reg[52]                
, input_clock_reg[51]                , input_clock_reg[50]                , input_clock_reg[49]                , input_clock_reg[48]                
, input_clock_reg[47]                , input_clock_reg[46]                , input_clock_reg[45]                , input_clock_reg[44]                
, input_clock_reg[43]                , input_clock_reg[42]                , input_clock_reg[41]                , input_clock_reg[40]                
, input_clock_reg[39]                , input_clock_reg[38]                , input_clock_reg[37]                , input_clock_reg[36]                
, input_clock_reg[35]                , input_clock_reg[34]                , input_clock_reg[33]                , input_clock_reg[32]                
, input_clock_reg[31]                , input_clock_reg[30]                , input_clock_reg[29]                , input_clock_reg[28]                
, input_clock_reg[27]                , input_clock_reg[26]                , input_clock_reg[25]                , input_clock_reg[24]                
, input_clock_reg[23]                , input_clock_reg[22]                , input_clock_reg[21]                , input_clock_reg[20]                
, input_clock_reg[19]                , input_clock_reg[18]                , input_clock_reg[17]                , input_clock_reg[16]                
, input_clock_reg[15]                , input_clock_reg[14]                , input_clock_reg[13]                , input_clock_reg[12]                
, input_clock_reg[11]                , input_clock_reg[10]                , input_clock_reg[09]                , input_clock_reg[08]                
, input_clock_reg[07]                , input_clock_reg[06]                , input_clock_reg[05]                , input_clock_reg[04]                
, input_clock_reg[03]                , input_clock_reg[02]                , input_clock_reg[01]                , input_clock_reg[00]                };

// ******************************************************
// Register 0x048 uart_param_header_fifo
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (header_fifo_next) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_next_reg[31:24] = header_fifo_next_default[31:24];
// ******************************************************
// Bit(s) 63:32 (header_fifo_next) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_next_reg[23:16] = header_fifo_next_default[23:16];
// ******************************************************
// Bit(s) 63:32 (header_fifo_next) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_next_reg[15:08] = header_fifo_next_default[15:08];
// ******************************************************
// Bit(s) 63:32 (header_fifo_next) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_next_reg[07:00] = header_fifo_next_default[07:00];
// ******************************************************
// Bit(s) 31:16 (header_fifo_version) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_version_reg[15:08] = header_fifo_version_default[15:08];
// ******************************************************
// Bit(s) 31:16 (header_fifo_version) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_version_reg[07:00] = header_fifo_version_default[07:00];
// ******************************************************
// Bit(s) 15:00 (header_fifo_param_id) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_param_id_reg[15:08] = header_fifo_param_id_default[15:08];
// ******************************************************
// Bit(s) 15:00 (header_fifo_param_id) of Register 0x048 uart_param_header_fifo
// ******************************************************
assign header_fifo_param_id_reg[07:00] = header_fifo_param_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign uart_param_header_fifo_wire = {
  header_fifo_next_reg[31]           , header_fifo_next_reg[30]           , header_fifo_next_reg[29]           , header_fifo_next_reg[28]           
, header_fifo_next_reg[27]           , header_fifo_next_reg[26]           , header_fifo_next_reg[25]           , header_fifo_next_reg[24]           
, header_fifo_next_reg[23]           , header_fifo_next_reg[22]           , header_fifo_next_reg[21]           , header_fifo_next_reg[20]           
, header_fifo_next_reg[19]           , header_fifo_next_reg[18]           , header_fifo_next_reg[17]           , header_fifo_next_reg[16]           
, header_fifo_next_reg[15]           , header_fifo_next_reg[14]           , header_fifo_next_reg[13]           , header_fifo_next_reg[12]           
, header_fifo_next_reg[11]           , header_fifo_next_reg[10]           , header_fifo_next_reg[09]           , header_fifo_next_reg[08]           
, header_fifo_next_reg[07]           , header_fifo_next_reg[06]           , header_fifo_next_reg[05]           , header_fifo_next_reg[04]           
, header_fifo_next_reg[03]           , header_fifo_next_reg[02]           , header_fifo_next_reg[01]           , header_fifo_next_reg[00]           
, header_fifo_version_reg[15]        , header_fifo_version_reg[14]        , header_fifo_version_reg[13]        , header_fifo_version_reg[12]        
, header_fifo_version_reg[11]        , header_fifo_version_reg[10]        , header_fifo_version_reg[09]        , header_fifo_version_reg[08]        
, header_fifo_version_reg[07]        , header_fifo_version_reg[06]        , header_fifo_version_reg[05]        , header_fifo_version_reg[04]        
, header_fifo_version_reg[03]        , header_fifo_version_reg[02]        , header_fifo_version_reg[01]        , header_fifo_version_reg[00]        
, header_fifo_param_id_reg[15]       , header_fifo_param_id_reg[14]       , header_fifo_param_id_reg[13]       , header_fifo_param_id_reg[12]       
, header_fifo_param_id_reg[11]       , header_fifo_param_id_reg[10]       , header_fifo_param_id_reg[09]       , header_fifo_param_id_reg[08]       
, header_fifo_param_id_reg[07]       , header_fifo_param_id_reg[06]       , header_fifo_param_id_reg[05]       , header_fifo_param_id_reg[04]       
, header_fifo_param_id_reg[03]       , header_fifo_param_id_reg[02]       , header_fifo_param_id_reg[01]       , header_fifo_param_id_reg[00]       };

// ******************************************************
// Register 0x050 vuart_param_data_fifo
// ******************************************************
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[63:56] = fifo_len_default[63:56];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[55:48] = fifo_len_default[55:48];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[47:40] = fifo_len_default[47:40];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[39:32] = fifo_len_default[39:32];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[31:24] = fifo_len_default[31:24];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[23:16] = fifo_len_default[23:16];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[15:08] = fifo_len_default[15:08];
// ******************************************************
// Bit(s) 63:00 (fifo_len) of Register 0x050 vuart_param_data_fifo
// ******************************************************
assign fifo_len_reg[07:00] = fifo_len_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_param_data_fifo_wire = {
  fifo_len_reg[63]                   , fifo_len_reg[62]                   , fifo_len_reg[61]                   , fifo_len_reg[60]                   
, fifo_len_reg[59]                   , fifo_len_reg[58]                   , fifo_len_reg[57]                   , fifo_len_reg[56]                   
, fifo_len_reg[55]                   , fifo_len_reg[54]                   , fifo_len_reg[53]                   , fifo_len_reg[52]                   
, fifo_len_reg[51]                   , fifo_len_reg[50]                   , fifo_len_reg[49]                   , fifo_len_reg[48]                   
, fifo_len_reg[47]                   , fifo_len_reg[46]                   , fifo_len_reg[45]                   , fifo_len_reg[44]                   
, fifo_len_reg[43]                   , fifo_len_reg[42]                   , fifo_len_reg[41]                   , fifo_len_reg[40]                   
, fifo_len_reg[39]                   , fifo_len_reg[38]                   , fifo_len_reg[37]                   , fifo_len_reg[36]                   
, fifo_len_reg[35]                   , fifo_len_reg[34]                   , fifo_len_reg[33]                   , fifo_len_reg[32]                   
, fifo_len_reg[31]                   , fifo_len_reg[30]                   , fifo_len_reg[29]                   , fifo_len_reg[28]                   
, fifo_len_reg[27]                   , fifo_len_reg[26]                   , fifo_len_reg[25]                   , fifo_len_reg[24]                   
, fifo_len_reg[23]                   , fifo_len_reg[22]                   , fifo_len_reg[21]                   , fifo_len_reg[20]                   
, fifo_len_reg[19]                   , fifo_len_reg[18]                   , fifo_len_reg[17]                   , fifo_len_reg[16]                   
, fifo_len_reg[15]                   , fifo_len_reg[14]                   , fifo_len_reg[13]                   , fifo_len_reg[12]                   
, fifo_len_reg[11]                   , fifo_len_reg[10]                   , fifo_len_reg[09]                   , fifo_len_reg[08]                   
, fifo_len_reg[07]                   , fifo_len_reg[06]                   , fifo_len_reg[05]                   , fifo_len_reg[04]                   
, fifo_len_reg[03]                   , fifo_len_reg[02]                   , fifo_len_reg[01]                   , fifo_len_reg[00]                   };

// ******************************************************
// Register 0x058 param_header_layout
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (header_layout_next) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_next_reg[31:24] = header_layout_next_default[31:24];
// ******************************************************
// Bit(s) 63:32 (header_layout_next) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_next_reg[23:16] = header_layout_next_default[23:16];
// ******************************************************
// Bit(s) 63:32 (header_layout_next) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_next_reg[15:08] = header_layout_next_default[15:08];
// ******************************************************
// Bit(s) 63:32 (header_layout_next) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_next_reg[07:00] = header_layout_next_default[07:00];
// ******************************************************
// Bit(s) 31:16 (header_layout_version) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_version_reg[15:08] = header_layout_version_default[15:08];
// ******************************************************
// Bit(s) 31:16 (header_layout_version) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_version_reg[07:00] = header_layout_version_default[07:00];
// ******************************************************
// Bit(s) 15:00 (header_layout_param_id) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_param_id_reg[15:08] = header_layout_param_id_default[15:08];
// ******************************************************
// Bit(s) 15:00 (header_layout_param_id) of Register 0x058 param_header_layout
// ******************************************************
assign header_layout_param_id_reg[07:00] = header_layout_param_id_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign param_header_layout_wire = {
  header_layout_next_reg[31]         , header_layout_next_reg[30]         , header_layout_next_reg[29]         , header_layout_next_reg[28]         
, header_layout_next_reg[27]         , header_layout_next_reg[26]         , header_layout_next_reg[25]         , header_layout_next_reg[24]         
, header_layout_next_reg[23]         , header_layout_next_reg[22]         , header_layout_next_reg[21]         , header_layout_next_reg[20]         
, header_layout_next_reg[19]         , header_layout_next_reg[18]         , header_layout_next_reg[17]         , header_layout_next_reg[16]         
, header_layout_next_reg[15]         , header_layout_next_reg[14]         , header_layout_next_reg[13]         , header_layout_next_reg[12]         
, header_layout_next_reg[11]         , header_layout_next_reg[10]         , header_layout_next_reg[09]         , header_layout_next_reg[08]         
, header_layout_next_reg[07]         , header_layout_next_reg[06]         , header_layout_next_reg[05]         , header_layout_next_reg[04]         
, header_layout_next_reg[03]         , header_layout_next_reg[02]         , header_layout_next_reg[01]         , header_layout_next_reg[00]         
, header_layout_version_reg[15]      , header_layout_version_reg[14]      , header_layout_version_reg[13]      , header_layout_version_reg[12]      
, header_layout_version_reg[11]      , header_layout_version_reg[10]      , header_layout_version_reg[09]      , header_layout_version_reg[08]      
, header_layout_version_reg[07]      , header_layout_version_reg[06]      , header_layout_version_reg[05]      , header_layout_version_reg[04]      
, header_layout_version_reg[03]      , header_layout_version_reg[02]      , header_layout_version_reg[01]      , header_layout_version_reg[00]      
, header_layout_param_id_reg[15]     , header_layout_param_id_reg[14]     , header_layout_param_id_reg[13]     , header_layout_param_id_reg[12]     
, header_layout_param_id_reg[11]     , header_layout_param_id_reg[10]     , header_layout_param_id_reg[09]     , header_layout_param_id_reg[08]     
, header_layout_param_id_reg[07]     , header_layout_param_id_reg[06]     , header_layout_param_id_reg[05]     , header_layout_param_id_reg[04]     
, header_layout_param_id_reg[03]     , header_layout_param_id_reg[02]     , header_layout_param_id_reg[01]     , header_layout_param_id_reg[00]     };

// ******************************************************
// Register 0x060 param_data_fifo
// ******************************************************
// ******************************************************
// Bit(s) 63:32 (reg_io_width) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_io_width_reg[31:24] = reg_io_width_default[31:24];
// ******************************************************
// Bit(s) 63:32 (reg_io_width) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_io_width_reg[23:16] = reg_io_width_default[23:16];
// ******************************************************
// Bit(s) 63:32 (reg_io_width) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_io_width_reg[15:08] = reg_io_width_default[15:08];
// ******************************************************
// Bit(s) 63:32 (reg_io_width) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_io_width_reg[07:00] = reg_io_width_default[07:00];
// ******************************************************
// Bit(s) 31:00 (reg_shift) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_shift_reg[31:24] = reg_shift_default[31:24];
// ******************************************************
// Bit(s) 31:00 (reg_shift) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_shift_reg[23:16] = reg_shift_default[23:16];
// ******************************************************
// Bit(s) 31:00 (reg_shift) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_shift_reg[15:08] = reg_shift_default[15:08];
// ******************************************************
// Bit(s) 31:00 (reg_shift) of Register 0x060 param_data_fifo
// ******************************************************
assign reg_shift_reg[07:00] = reg_shift_default[07:00];

// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign param_data_fifo_wire = {
  reg_io_width_reg[31]               , reg_io_width_reg[30]               , reg_io_width_reg[29]               , reg_io_width_reg[28]               
, reg_io_width_reg[27]               , reg_io_width_reg[26]               , reg_io_width_reg[25]               , reg_io_width_reg[24]               
, reg_io_width_reg[23]               , reg_io_width_reg[22]               , reg_io_width_reg[21]               , reg_io_width_reg[20]               
, reg_io_width_reg[19]               , reg_io_width_reg[18]               , reg_io_width_reg[17]               , reg_io_width_reg[16]               
, reg_io_width_reg[15]               , reg_io_width_reg[14]               , reg_io_width_reg[13]               , reg_io_width_reg[12]               
, reg_io_width_reg[11]               , reg_io_width_reg[10]               , reg_io_width_reg[09]               , reg_io_width_reg[08]               
, reg_io_width_reg[07]               , reg_io_width_reg[06]               , reg_io_width_reg[05]               , reg_io_width_reg[04]               
, reg_io_width_reg[03]               , reg_io_width_reg[02]               , reg_io_width_reg[01]               , reg_io_width_reg[00]               
, reg_shift_reg[31]                  , reg_shift_reg[30]                  , reg_shift_reg[29]                  , reg_shift_reg[28]                  
, reg_shift_reg[27]                  , reg_shift_reg[26]                  , reg_shift_reg[25]                  , reg_shift_reg[24]                  
, reg_shift_reg[23]                  , reg_shift_reg[22]                  , reg_shift_reg[21]                  , reg_shift_reg[20]                  
, reg_shift_reg[19]                  , reg_shift_reg[18]                  , reg_shift_reg[17]                  , reg_shift_reg[16]                  
, reg_shift_reg[15]                  , reg_shift_reg[14]                  , reg_shift_reg[13]                  , reg_shift_reg[12]                  
, reg_shift_reg[11]                  , reg_shift_reg[10]                  , reg_shift_reg[09]                  , reg_shift_reg[08]                  
, reg_shift_reg[07]                  , reg_shift_reg[06]                  , reg_shift_reg[05]                  , reg_shift_reg[04]                  
, reg_shift_reg[03]                  , reg_shift_reg[02]                  , reg_shift_reg[01]                  , reg_shift_reg[00]                  };

// ******************************************************
// Register 0x0f0 vuart_scratchpad
// ******************************************************
// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[63:56] <= scratchpad_default[63:56];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[7]) begin
         scratchpad_reg[63:56] <= csr_regwr_data_r3[63:56];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[55:48] <= scratchpad_default[55:48];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[6]) begin
         scratchpad_reg[55:48] <= csr_regwr_data_r3[55:48];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[47:40] <= scratchpad_default[47:40];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[5]) begin
         scratchpad_reg[47:40] <= csr_regwr_data_r3[47:40];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[39:32] <= scratchpad_default[39:32];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[4]) begin
         scratchpad_reg[39:32] <= csr_regwr_data_r3[39:32];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[31:24] <= scratchpad_default[31:24];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[3]) begin
         scratchpad_reg[31:24] <= csr_regwr_data_r3[31:24];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[23:16] <= scratchpad_default[23:16];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[2]) begin
         scratchpad_reg[23:16] <= csr_regwr_data_r3[23:16];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[15:08] <= scratchpad_default[15:08];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[1]) begin
         scratchpad_reg[15:08] <= csr_regwr_data_r3[15:08];
      end
   end

// ******************************************************
// Bit(s) 63:00 (scratchpad) of Register 0x0f0 vuart_scratchpad
// ******************************************************
   always @(posedge clk_csr) begin
      if (~rst_n_csr) begin
         scratchpad_reg[07:00] <= scratchpad_default[07:00];
      end
      else if (vuart_scratchpad_en_r3 & core_reg_we_r3 & byte_en_r3[0]) begin
         scratchpad_reg[07:00] <= csr_regwr_data_r3[07:00];
      end
   end


// *****************************************************
// assign the register net to all the bits.
// *****************************************************
assign vuart_scratchpad_wire = {
  scratchpad_reg[63]                 , scratchpad_reg[62]                 , scratchpad_reg[61]                 , scratchpad_reg[60]                 
, scratchpad_reg[59]                 , scratchpad_reg[58]                 , scratchpad_reg[57]                 , scratchpad_reg[56]                 
, scratchpad_reg[55]                 , scratchpad_reg[54]                 , scratchpad_reg[53]                 , scratchpad_reg[52]                 
, scratchpad_reg[51]                 , scratchpad_reg[50]                 , scratchpad_reg[49]                 , scratchpad_reg[48]                 
, scratchpad_reg[47]                 , scratchpad_reg[46]                 , scratchpad_reg[45]                 , scratchpad_reg[44]                 
, scratchpad_reg[43]                 , scratchpad_reg[42]                 , scratchpad_reg[41]                 , scratchpad_reg[40]                 
, scratchpad_reg[39]                 , scratchpad_reg[38]                 , scratchpad_reg[37]                 , scratchpad_reg[36]                 
, scratchpad_reg[35]                 , scratchpad_reg[34]                 , scratchpad_reg[33]                 , scratchpad_reg[32]                 
, scratchpad_reg[31]                 , scratchpad_reg[30]                 , scratchpad_reg[29]                 , scratchpad_reg[28]                 
, scratchpad_reg[27]                 , scratchpad_reg[26]                 , scratchpad_reg[25]                 , scratchpad_reg[24]                 
, scratchpad_reg[23]                 , scratchpad_reg[22]                 , scratchpad_reg[21]                 , scratchpad_reg[20]                 
, scratchpad_reg[19]                 , scratchpad_reg[18]                 , scratchpad_reg[17]                 , scratchpad_reg[16]                 
, scratchpad_reg[15]                 , scratchpad_reg[14]                 , scratchpad_reg[13]                 , scratchpad_reg[12]                 
, scratchpad_reg[11]                 , scratchpad_reg[10]                 , scratchpad_reg[09]                 , scratchpad_reg[08]                 
, scratchpad_reg[07]                 , scratchpad_reg[06]                 , scratchpad_reg[05]                 , scratchpad_reg[04]                 
, scratchpad_reg[03]                 , scratchpad_reg[02]                 , scratchpad_reg[01]                 , scratchpad_reg[00]                 };

// *****************************************************
// RTL for the first level muxes.
// *****************************************************
  always @(posedge clk_csr) begin
      csr_decode_mux_r4 <= 64'h00000000 // 0xff8
            | vuart_dfh_wire                      & {64{vuart_dfh_en_r3}}               // 0x000
            | vuart_feature_guid_l_wire           & {64{vuart_feature_guid_l_en_r3}}    // 0x008
            | vuart_feature_guid_h_wire           & {64{vuart_feature_guid_h_en_r3}}    // 0x010
            | vuart_feature_csr_addr_wire         & {64{vuart_feature_csr_addr_en_r3}}  // 0x018
            | vuart_feature_csr_size_group_wire   & {64{vuart_feature_csr_size_group_en_r3}} // 0x020
            | vuart_param_header_msix_wire        & {64{vuart_param_header_msix_en_r3}} // 0x028
            | vuart_param_data_msix_wire          & {64{vuart_param_data_msix_en_r3}}   // 0x030
            | vuart_param_header_clock_wire       & {64{vuart_param_header_clock_en_r3}} // 0x038
            | vuart_param_data_clock_wire         & {64{vuart_param_data_clock_en_r3}}  // 0x040
            | uart_param_header_fifo_wire         & {64{uart_param_header_fifo_en_r3}}  // 0x048
            | vuart_param_data_fifo_wire          & {64{vuart_param_data_fifo_en_r3}}   // 0x050
            | param_header_layout_wire            & {64{param_header_layout_en_r3}}     // 0x058
            | param_data_fifo_wire                & {64{param_data_fifo_en_r3}}         // 0x060
            | vuart_scratchpad_wire               & {64{vuart_scratchpad_en_r3}}        // 0x0f0
              ;
    end

// *****************************************************
// Now onto everything on the clk clock domain.
// *****************************************************
   // *****************************************************
   // RTL for the final read mux (just an or gate) async signals masked by targeting_clkX_domain_register
   // *****************************************************
   always @(posedge clk_csr) begin
      csr_readdata <= csr_decode_mux_r4                                                          ; // 0xff8;
   end

   
   // synopsys translate_off
   //   wire [HI_ADDR_BIT:0] csr_address_real = {1'b1, csr_address, 2'h0};
   //`ifdef loggers_on
   //   
   //   always @(posedge clk_csr) begin
   //      if (csr_read & ~csr_waitrequest) begin
   //       $display("T:%8d INFO: %m RB RD addr:%x data:%x", $time, csr_address_real, csr_readdata);
   
   //      end
   //      if (csr_write & ~csr_waitrequest) begin
   //       $display("T:%8d INFO: %m RB WR addr:%x data:%x", $time, csr_address_real, csr_wdata);
   //      end
   //   end
   //`endif
   // synopsys translate_on
   
endmodule
