# Copyright 2022 Intel Corporation
# SPDX-License-Identifier: MIT

# TCL File Generated by Component Editor 22.2
# Mon Apr 04 13:48:01 PDT 2022
# DO NOT MODIFY


# 
# pf_vf_mux "pf_vf_mux" v1.0
#  2022.04.04.13:48:01
# 
# 

# 
# request TCL package from ACDS 22.1
# 
package require -exact qsys 22.1


# 
# module pf_vf_mux
# 
set_module_property DESCRIPTION ""
set_module_property NAME pf_vf_mux
set_module_property VERSION 1.0
set_module_property INTERNAL false
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property GROUP "ofs infra"
set_module_property AUTHOR ""
set_module_property DISPLAY_NAME pf_vf_mux
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property REPORT_TO_TALKBACK false
set_module_property ALLOW_GREYBOX_GENERATION false
set_module_property REPORT_HIERARCHY false
set_module_property LOAD_ELABORATION_LIMIT 0
set_module_property ELABORATION_CALLBACK elab


# 
# file sets
# 
add_fileset QUARTUS_SYNTH QUARTUS_SYNTH do_fileset_quartus_synth
set_fileset_property QUARTUS_SYNTH ENABLE_RELATIVE_INCLUDE_PATHS false
set_fileset_property QUARTUS_SYNTH ENABLE_FILE_OVERWRITE_MODE false
add_fileset_file Nmux.sv SYSTEM_VERILOG PATH Nmux.sv
add_fileset_file bfifo.sv SYSTEM_VERILOG PATH ../fifo/bfifo.sv
#add_fileset_file fpga_defines.vh OTHER PATH ../../fims/n6000/includes/fpga_defines.vh
add_fileset_file gram_sdp.sv SYSTEM_VERILOG PATH ../ram/gram_sdp.sv
#add_fileset_file ofs_fim_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/includes/ofs_fim_cfg_pkg.sv
#add_fileset_file ofs_fim_if_pkg.sv SYSTEM_VERILOG PATH ../../includes/ofs_fim_if_pkg.sv
add_fileset_file ofs_pcie_ss_cfg.vh OTHER PATH ../../includes/ofs_pcie_ss_cfg.vh
#add_fileset_file ofs_pcie_ss_cfg_pkg.sv SYSTEM_VERILOG PATH ../../includes/ofs_pcie_ss_cfg_pkg.sv
#add_fileset_file ofs_pcie_ss_plat_cfg.vh OTHER PATH ../../fims/n6000/includes/ofs_pcie_ss_plat_cfg.vh
#add_fileset_file ofs_pcie_ss_plat_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/includes/ofs_pcie_ss_plat_cfg_pkg.sv
#add_fileset_file pcie_ss_axis_if.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_axis_if.sv SYSTEMVERILOG_INTERFACE
add_fileset_file pcie_ss_axis_mux.sv SYSTEM_VERILOG PATH pcie_ss_axis_mux.sv
add_fileset_file pcie_ss_hdr_pkg.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_hdr_pkg.sv
#add_fileset_file pcie_ss_pkg.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_pkg.sv
add_fileset_file pf_vf_mux_top.sv SYSTEM_VERILOG PATH pf_vf_mux_top.sv
add_fileset_file pf_vf_mux_w_params.sv SYSTEM_VERILOG PATH pf_vf_mux_w_params.sv
add_fileset_file ram_1r1w.sv SYSTEM_VERILOG PATH ../ram/ram_1r1w.sv
add_fileset_file switch.sv SYSTEM_VERILOG PATH switch.sv
#add_fileset_file pf_vf_cfg_pkg.sv SYSTEM_VERILOG PATH pf_vf_mux_pkg.sv
#add_fileset_file top_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/afu/pf_vf_mux_top/mux/top_cfg_pkg.sv
add_fileset_file vendor_defines.vh OTHER PATH ../../includes/vendor_defines.vh

add_fileset SIM_VERILOG SIM_VERILOG do_fileset_quartus_synth
set_fileset_property SIM_VERILOG ENABLE_RELATIVE_INCLUDE_PATHS false
set_fileset_property SIM_VERILOG ENABLE_FILE_OVERWRITE_MODE false
add_fileset_file Nmux.sv SYSTEM_VERILOG PATH Nmux.sv
add_fileset_file bfifo.sv SYSTEM_VERILOG PATH ../fifo/bfifo.sv
#add_fileset_file fpga_defines.vh OTHER PATH ../../fims/n6000/includes/fpga_defines.vh
add_fileset_file gram_sdp.sv SYSTEM_VERILOG PATH ../ram/gram_sdp.sv
#add_fileset_file ofs_fim_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/includes/ofs_fim_cfg_pkg.sv
#add_fileset_file ofs_fim_if_pkg.sv SYSTEM_VERILOG PATH ../../includes/ofs_fim_if_pkg.sv
add_fileset_file ofs_pcie_ss_cfg.vh OTHER PATH ../../includes/ofs_pcie_ss_cfg.vh
#add_fileset_file ofs_pcie_ss_cfg_pkg.sv SYSTEM_VERILOG PATH ../../includes/ofs_pcie_ss_cfg_pkg.sv
#add_fileset_file ofs_pcie_ss_plat_cfg.vh OTHER PATH ../../fims/n6000/includes/ofs_pcie_ss_plat_cfg.vh
#add_fileset_file ofs_pcie_ss_plat_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/includes/ofs_pcie_ss_plat_cfg_pkg.sv
#add_fileset_file pcie_ss_axis_if.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_axis_if.sv SYSTEMVERILOG_INTERFACE
add_fileset_file pcie_ss_axis_mux.sv SYSTEM_VERILOG PATH pcie_ss_axis_mux.sv
add_fileset_file pcie_ss_hdr_pkg.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_hdr_pkg.sv
#add_fileset_file pcie_ss_pkg.sv SYSTEM_VERILOG PATH ../../includes/pcie_ss_pkg.sv
add_fileset_file pf_vf_mux_top.sv SYSTEM_VERILOG PATH pf_vf_mux_top.sv
add_fileset_file pf_vf_mux_w_params.sv SYSTEM_VERILOG PATH pf_vf_mux_w_params.sv
add_fileset_file ram_1r1w.sv SYSTEM_VERILOG PATH ../ram/ram_1r1w.sv
add_fileset_file switch.sv SYSTEM_VERILOG PATH switch.sv
#add_fileset_file pf_vf_cfg_pkg.sv SYSTEM_VERILOG PATH pf_vf_mux_pkg.sv
#add_fileset_file top_cfg_pkg.sv SYSTEM_VERILOG PATH ../../fims/n6000/afu/pf_vf_mux_top/mux/top_cfg_pkg.sv
add_fileset_file vendor_defines.vh OTHER PATH ../../includes/vendor_defines.vh


# 
# parameters
# 
set N_PORT_MIN 1
set N_PORT_MAX 12
add_parameter N_PORT integer 2
set_parameter_property N_PORT allowed_ranges "$N_PORT_MIN:$N_PORT_MAX"
#set_parameter_property N_PORT hdl_parameter true
add_display_item ENDPOINTS N_PORT PARAMETER
add_display_item ENDPOINTS id text "Specify N_PORTS - physical ports out of mux"

add_parameter N_ROUTING_TABLE_ENTRY integer 2
add_display_item ENDPOINTS N_ROUTING_TABLE_ENTRY PARAMETER
add_display_item ENDPOINTS id text "Specify N_ROUTING_TABLE_ENTRY - routing table entries"

add_parameter PF INTEGER_LIST {0 0}
add_parameter VA INTEGER_LIST {0 0}
add_parameter VF INTEGER_LIST {0 0}
add_parameter PID INTEGER_LIST {0 0}
add_display_item RT_TABLE PF PARAMETER
add_display_item RT_TABLE VA PARAMETER
add_display_item RT_TABLE VF PARAMETER
add_display_item RT_TABLE PID PARAMETER
set_display_item_property RT_TABLE DISPLAY_HINT [list TABLE]

# pcie_ss_axis_if paramters
add_parameter DATA_W INTEGER 512
set_parameter_property DATA_W DEFAULT_VALUE 512
set_parameter_property DATA_W DISPLAY_NAME DATA_W
set_parameter_property DATA_W UNITS None
set_parameter_property DATA_W ALLOWED_RANGES -2147483648:2147483647
set_parameter_property DATA_W AFFECTS_GENERATION false
#set_parameter_property DATA_W HDL_PARAMETER true
set_parameter_property DATA_W EXPORT true
add_parameter USER_W INTEGER 10
set_parameter_property USER_W DEFAULT_VALUE 10
set_parameter_property USER_W DISPLAY_NAME USER_W
set_parameter_property USER_W UNITS None
set_parameter_property USER_W ALLOWED_RANGES -2147483648:2147483647
set_parameter_property USER_W AFFECTS_GENERATION false
#set_parameter_property USER_W HDL_PARAMETER true
set_parameter_property USER_W EXPORT true

# 
# display items
# 


# 
# connection point clock
# 
add_interface clock clock end
set_interface_property clock ENABLED true
set_interface_property clock EXPORT_OF ""
set_interface_property clock PORT_NAME_MAP ""
set_interface_property clock CMSIS_SVD_VARIABLES ""
set_interface_property clock SVD_ADDRESS_GROUP ""
set_interface_property clock IPXACT_REGISTER_MAP_VARIABLES ""

add_interface_port clock clk clk Input 1


# 
# connection point reset_sink
# 
add_interface reset_sink reset end
set_interface_property reset_sink associatedClock clock
set_interface_property reset_sink synchronousEdges DEASSERT
set_interface_property reset_sink ENABLED true
set_interface_property reset_sink EXPORT_OF ""
set_interface_property reset_sink PORT_NAME_MAP ""
set_interface_property reset_sink CMSIS_SVD_VARIABLES ""
set_interface_property reset_sink SVD_ADDRESS_GROUP ""
set_interface_property reset_sink IPXACT_REGISTER_MAP_VARIABLES ""

add_interface_port reset_sink rst_n reset_n Input 1

#
# fuctions
#
proc do_fileset_quartus_synth {output_name} {
    set filename ${output_name}.sv;
    set top_level_contents [render_top_level $output_name]
    add_fileset_file $filename SYSTEM_VERILOG TEXT $top_level_contents ;
}

proc render_top_level {output_name} {

    set template {

// Copyright 2020 Intel Corporation.
//
// THIS SOFTWARE MAY CONTAIN PREPRODUCTION CODE AND IS PROVIDED BY THE
// COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

module ${output_name} (
   input clk,
   input rst_n,

    @@ for {set i 0} {$i<$num_ports} {incr i} {        
   pcie_ss_axis_if.source mx2fn_rx_port_${i}      ,                        
   pcie_ss_axis_if.sink   fn2mx_tx_port_${i}      ,           
    @@ }
   
   pcie_ss_axis_if.sink   ho2mx_rx_port          ,                             
   pcie_ss_axis_if.source mx2ho_tx_port          

);

// Routing table
@@ for {set i 0} {$i<$num_rtable_entry} {incr i} {
@@ set pf_value [lindex $pf_val $i] 
@@ set vf_value [lindex $vf_val $i] 
@@ set va_value [lindex $va_val $i] 
@@ set pid_value [lindex $pid_val $i] 
localparam PORT${i}_PF   = ${pf_value}; localparam PORT${i}_VA   = ${va_value}; localparam PORT${i}_VF   = ${vf_value}; localparam PORT${i}_PID   = ${pid_value};
@@ }

localparam N_PORT = ${num_ports};
localparam NUM_RTABLE_ENTRIES = ${num_rtable_entry} + 2;
@@ set num_rtable_entry_m_1 [expr ${num_rtable_entry} -1];
localparam pf_vf_mux_pkg::t_pfvf_rtable_entry [NUM_RTABLE_ENTRIES-1:0] PFVF_ROUTING_TABLE = '{
    '{ pfvf_port:PORT0_PID , pf:-1       , vf:-1       , vf_active:0         },
    '{ pfvf_port:PORT0_PID , pf:-1       , vf:-1       , vf_active:1         },
@@ for {set i 0} {$i<$num_rtable_entry} {incr i} {
@@ set pf_value [lindex $pf_val $i] 
@@ set vf_value [lindex $vf_val $i] 
@@ set va_value [lindex $va_val $i] 
@@ set pid_value [lindex $pid_val $i]
@@ if { $i == $num_rtable_entry_m_1} {
    '{ pfvf_port:PORT${i}_PID   , pf:PORT${i}_PF   , vf:PORT${i}_VF   , vf_active:PORT${i}_VA    }
@@ } else {
    '{ pfvf_port:PORT${i}_PID   , pf:PORT${i}_PF   , vf:PORT${i}_VF   , vf_active:PORT${i}_VA    },
@@ }
@@ }
    };

pcie_ss_axis_if mx2fn_rx_port [N_PORT-1:0](.clk(clk), .rst_n(rst_n));
pcie_ss_axis_if fn2mx_tx_port [N_PORT-1:0](.clk(clk), .rst_n(rst_n));

@@ set num_ports_m_1 [expr $num_ports -1]
@@ for {set i $num_ports_m_1} {$i>=0} {incr i -1} {   

assign mx2fn_rx_port[$i].tready           = mx2fn_rx_port_$i.tready;
assign mx2fn_rx_port_$i.tvalid          = mx2fn_rx_port[$i].tvalid;
assign mx2fn_rx_port_$i.tlast           = mx2fn_rx_port[$i].tlast;
assign mx2fn_rx_port_$i.tuser_vendor    = mx2fn_rx_port[$i].tuser_vendor;
assign mx2fn_rx_port_$i.tdata           = mx2fn_rx_port[$i].tdata;
assign mx2fn_rx_port_$i.tkeep           = mx2fn_rx_port[$i].tkeep;
    
assign fn2mx_tx_port_$i.tready           = fn2mx_tx_port[$i].tready;
assign fn2mx_tx_port[$i].tvalid          = fn2mx_tx_port_$i.tvalid;
assign fn2mx_tx_port[$i].tlast           = fn2mx_tx_port_$i.tlast;
assign fn2mx_tx_port[$i].tuser_vendor    = fn2mx_tx_port_$i.tuser_vendor;
assign fn2mx_tx_port[$i].tdata           = fn2mx_tx_port_$i.tdata;
assign fn2mx_tx_port[$i].tkeep           = fn2mx_tx_port_$i.tkeep;

@@ }


pf_vf_mux_w_params #(
   .NUM_PORT           (N_PORT),
   .NUM_RTABLE_ENTRIES (NUM_RTABLE_ENTRIES), 
   .PFVF_ROUTING_TABLE (PFVF_ROUTING_TABLE)
) pf_vf_mux (
   .clk             (clk               ),
   .rst_n           (rst_n             ),
   .ho2mx_rx_port   (ho2mx_rx_port     ),
   .mx2ho_tx_port   (mx2ho_tx_port     ),
   .mx2fn_rx_port   (mx2fn_rx_port     ), 
   .fn2mx_tx_port   (fn2mx_tx_port     ),
   .out_fifo_err    (/*don't care*/    ),
   .out_fifo_perr   (/*don't care*/    )
);

endmodule

    }
    
    # setup template parameters
    set params(output_name) $output_name ;# template params are elements of a Tcl array
    set params(num_ports) [get_parameter_value N_PORT];
    set params(num_rtable_entry) [get_parameter_value N_ROUTING_TABLE_ENTRY];
    set params(pf_val) [get_parameter_value PF];
    set params(vf_val) [get_parameter_value VF];
    set params(va_val) [get_parameter_value VA];
    set params(pid_val) [get_parameter_value PID];
    
    
    # process template with parameters
    set contents [altera_terp $template params] ;# pass parameter array in by reference
    return $contents   
}

# This proc was put at the end to preserve syntax highlighting for the rest of the file
proc altera_terp { template parameters } {
        global terp_out
        set terp_out ""

    set r "";

    append r "global terp_out"
        upvar $parameters param;
        append r "\nupvar 2 $parameters param";
    foreach name [array names param] {
        append r "\nset $name " {$param(} "$name" {)}
    }
    
    set lines [split $template "\n"]
    foreach line $lines {
    
        set tclcmd ""
        set all ""
        set is_tcl_cmd [regexp {@@(.*)} $line all tclcmd]

        if {$is_tcl_cmd} {
            append r "\n$tclcmd";
        } else {
            # ----------------------------------------
            # This is not a tcl command, but we still want variable
            # substitution.
            # Escape '[', ']', and '"' so that TCL doesn't use them.
            # ----------------------------------------
            regsub -all {\[} $line {\\[} line
            regsub -all {\]} $line {\\]} line
            regsub -all {\"} $line {\\"} line
            
            append r "\nappend terp_out \"${line}\\n\""
        }
    }
        proc doGeneration { } "$r"
        if { [ catch { doGeneration } result ] == 1 } {
          puts stderr "proc doGeneration { } {"
          puts stderr "$r"
      puts stderr "}"
        }
        set terp_out ""
        doGeneration
    return $terp_out
}

# proc elaborate
proc elab {} {
    set num_ports [get_parameter_value N_PORT]
    set num_rtable_entry [get_parameter_value N_ROUTING_TABLE_ENTRY]
    set user_width [get_parameter_value USER_W]
    set data_width [get_parameter_value DATA_W]
    for {set i 0} {$i < $num_ports} {incr i} {

        # 
        # connection point fn2mx_tx_port0
        # 
        add_interface fn2mx_tx_port_${i} axi4stream end
        set_interface_property fn2mx_tx_port_${i} associatedClock clock
        set_interface_property fn2mx_tx_port_${i} associatedReset reset_sink
        set_interface_property fn2mx_tx_port_${i} ENABLED true
        set_interface_property fn2mx_tx_port_${i} EXPORT_OF ""
        set_interface_property fn2mx_tx_port_${i} PORT_NAME_MAP ""
        set_interface_property fn2mx_tx_port_${i} CMSIS_SVD_VARIABLES ""
        set_interface_property fn2mx_tx_port_${i} SVD_ADDRESS_GROUP ""
        set_interface_property fn2mx_tx_port_${i} IPXACT_REGISTER_MAP_VARIABLES ""
        set_interface_property fn2mx_tx_port_${i} SV_INTERFACE_TYPE pcie_ss_axis_if
        set_interface_property fn2mx_tx_port_${i} SV_INTERFACE_MODPORT_TYPE sink

        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tvalid tvalid Input 1
        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tready tready Output 1
        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tkeep tkeep Input "$data_width/8"
        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tuser_vendor tuser Input $user_width
        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tlast tlast Input 1
        add_interface_port fn2mx_tx_port_${i} fn2mx_tx_port_${i}_tdata tdata Input $data_width


        #
        # connection point mx2fn_rx_port_${i}
        # 

        add_interface mx2fn_rx_port_${i} axi4stream start
        set_interface_property mx2fn_rx_port_${i} associatedClock clock
        set_interface_property mx2fn_rx_port_${i} associatedReset reset_sink
        set_interface_property mx2fn_rx_port_${i} ENABLED true
        set_interface_property mx2fn_rx_port_${i} EXPORT_OF ""
        set_interface_property mx2fn_rx_port_${i} PORT_NAME_MAP ""
        set_interface_property mx2fn_rx_port_${i} CMSIS_SVD_VARIABLES ""
        set_interface_property mx2fn_rx_port_${i} SVD_ADDRESS_GROUP ""
        set_interface_property mx2fn_rx_port_${i} IPXACT_REGISTER_MAP_VARIABLES ""
        set_interface_property mx2fn_rx_port_${i} SV_INTERFACE_TYPE pcie_ss_axis_if
        set_interface_property mx2fn_rx_port_${i} SV_INTERFACE_MODPORT_TYPE source

        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tvalid tvalid Output 1
        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tready tready Input 1
        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tkeep tkeep Output "$data_width/8"
        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tuser_vendor tuser Output $user_width
        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tlast tlast Output 1
        add_interface_port mx2fn_rx_port_${i} mx2fn_rx_port_${i}_tdata tdata Output $data_width

    }

    # 
    # connection point ho2mx_rx_port
    # 
    add_interface ho2mx_rx_port axi4stream end
    set_interface_property ho2mx_rx_port associatedClock clock
    set_interface_property ho2mx_rx_port associatedReset reset_sink
    set_interface_property ho2mx_rx_port ENABLED true
    set_interface_property ho2mx_rx_port EXPORT_OF ""
    set_interface_property ho2mx_rx_port PORT_NAME_MAP ""
    set_interface_property ho2mx_rx_port CMSIS_SVD_VARIABLES ""
    set_interface_property ho2mx_rx_port SVD_ADDRESS_GROUP ""
    set_interface_property ho2mx_rx_port IPXACT_REGISTER_MAP_VARIABLES ""
    set_interface_property ho2mx_rx_port SV_INTERFACE_TYPE pcie_ss_axis_if
    set_interface_property ho2mx_rx_port SV_INTERFACE_MODPORT_TYPE sink

    add_interface_port ho2mx_rx_port ho2mx_rx_port_tvalid tvalid Input 1
    add_interface_port ho2mx_rx_port ho2mx_rx_port_tready tready Output 1
    add_interface_port ho2mx_rx_port ho2mx_rx_port_tkeep tkeep Input "$data_width/8"
    add_interface_port ho2mx_rx_port ho2mx_rx_port_tuser_vendor tuser Input "$user_width"
    add_interface_port ho2mx_rx_port ho2mx_rx_port_tlast tlast Input 1
    add_interface_port ho2mx_rx_port ho2mx_rx_port_tdata tdata Input $data_width

    # 
    # connection point mx2ho_tx_port
    # 
    add_interface mx2ho_tx_port axi4stream start
    set_interface_property mx2ho_tx_port associatedClock clock
    set_interface_property mx2ho_tx_port associatedReset reset_sink
    set_interface_property mx2ho_tx_port ENABLED true
    set_interface_property mx2ho_tx_port EXPORT_OF ""
    set_interface_property mx2ho_tx_port PORT_NAME_MAP ""
    set_interface_property mx2ho_tx_port CMSIS_SVD_VARIABLES ""
    set_interface_property mx2ho_tx_port SVD_ADDRESS_GROUP ""
    set_interface_property mx2ho_tx_port IPXACT_REGISTER_MAP_VARIABLES ""
    set_interface_property mx2ho_tx_port SV_INTERFACE_TYPE pcie_ss_axis_if
    set_interface_property mx2ho_tx_port SV_INTERFACE_MODPORT_TYPE source

    add_interface_port mx2ho_tx_port mx2ho_tx_port_tvalid tvalid Output 1
    add_interface_port mx2ho_tx_port mx2ho_tx_port_tready tready Input 1
    add_interface_port mx2ho_tx_port mx2ho_tx_port_tkeep tkeep Output "$data_width/8"
    add_interface_port mx2ho_tx_port mx2ho_tx_port_tuser_vendor tuser Output $user_width
    add_interface_port mx2ho_tx_port mx2ho_tx_port_tlast tlast Output 1
    add_interface_port mx2ho_tx_port mx2ho_tx_port_tdata tdata Output $data_width

    set va_val [get_parameter_value VA]
    set list_length [llength $va_val]
    # Error checks
    if {$num_rtable_entry != $list_length} {
         send_message error "N_ROUTING_TABLE_ENTRY must match the number of rows in the routing table"
         #send_message {Info Test} "numport $num_ports,  list_length $list_length , va_val $va_val"
    }

    # VA can be only 1 or 0
    foreach item $va_val {
        if {$item == 0 || $item == 1} {
        } else {
            send_message error "VA cannot be $item, allowed 0 or 1"
        }
    }

}



