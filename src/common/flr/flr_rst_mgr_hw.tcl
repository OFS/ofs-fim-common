# Copyright 2022 Intel Corporation
# SPDX-License-Identifier: MIT

# TCL File Generated by Component Editor 22.2
# Mon Apr 04 13:48:01 PDT 2022
# DO NOT MODIFY


# 
# flr_rst_mgr "flr_rst_mgr" v1.0
#  2022.04.04.13:48:01
# 
# 

# 
# request TCL package from ACDS 22.1
# 
package require -exact qsys 22.1


# 
# module flr_rst_mgr
# 
set_module_property DESCRIPTION ""
set_module_property NAME flr_rst_mgr
set_module_property VERSION 1.0
set_module_property INTERNAL false
set_module_property OPAQUE_ADDRESS_MAP true
set_module_property GROUP "ofs infra"
set_module_property AUTHOR ""
set_module_property DISPLAY_NAME flr_rst_mgr
set_module_property INSTANTIATE_IN_SYSTEM_MODULE true
set_module_property EDITABLE true
set_module_property REPORT_TO_TALKBACK false
set_module_property ALLOW_GREYBOX_GENERATION false
set_module_property REPORT_HIERARCHY false
set_module_property LOAD_ELABORATION_LIMIT 0
set_module_property ELABORATION_CALLBACK elab


# 
# file sets
# 
add_fileset QUARTUS_SYNTH QUARTUS_SYNTH do_fileset_quartus_synth
set_fileset_property QUARTUS_SYNTH ENABLE_RELATIVE_INCLUDE_PATHS false
set_fileset_property QUARTUS_SYNTH ENABLE_FILE_OVERWRITE_MODE false
add_fileset_file flr_rst_mgr.sv SYSTEM_VERILOG PATH flr_rst_mgr.sv

add_fileset SIM_VERILOG SIM_VERILOG do_fileset_quartus_synth
set_fileset_property SIM_VERILOG ENABLE_RELATIVE_INCLUDE_PATHS false
set_fileset_property SIM_VERILOG ENABLE_FILE_OVERWRITE_MODE false
add_fileset_file flr_rst_mgr.sv SYSTEM_VERILOG PATH flr_rst_mgr.sv


# 
# parameters
# 
set N_PORT_MIN 1
set N_PORT_MAX 12
add_parameter N_PORT integer 2
set_parameter_property N_PORT allowed_ranges "$N_PORT_MIN:$N_PORT_MAX"
#set_parameter_property N_PORT hdl_parameter true
add_display_item ENDPOINTS N_PORT PARAMETER
add_display_item ENDPOINTS id text "Specify N_PORTS and configure routing table accordingly"

add_parameter PF INTEGER_LIST {0 0}
add_parameter VA INTEGER_LIST {0 0}
add_parameter VF INTEGER_LIST {0 0}
add_display_item RT_TABLE PF PARAMETER
add_display_item RT_TABLE VA PARAMETER
add_display_item RT_TABLE VF PARAMETER
set_display_item_property RT_TABLE DISPLAY_HINT [list TABLE]


# 
# connection point clk/rst
# 
add_interface clk_sys clock end
set_interface_property clk_sys ENABLED true
set_interface_property clk_sys IPXACT_REGISTER_MAP_VARIABLES ""
add_interface_port clk_sys clk_sys clk Input 1


add_interface rst_n_sys reset end
set_interface_property rst_n_sys associatedClock clk_sys
set_interface_property rst_n_sys synchronousEdges DEASSERT
set_interface_property rst_n_sys ENABLED true
add_interface_port rst_n_sys rst_n_sys reset_n Input 1

add_interface clk_csr clock end
set_interface_property clk_csr ENABLED true
set_interface_property clk_csr IPXACT_REGISTER_MAP_VARIABLES ""
add_interface_port clk_csr clk_csr clk Input 1


add_interface rst_n_csr reset end
set_interface_property rst_n_csr associatedClock clk_csr
set_interface_property rst_n_csr synchronousEdges DEASSERT
set_interface_property rst_n_csr ENABLED true
add_interface_port rst_n_csr rst_n_csr reset_n Input 1

# flrrcvd & flrcmpl
add_interface ss_app_flrrcvd axi4stream end
set_interface_property ss_app_flrrcvd associatedClock clk_csr
set_interface_property ss_app_flrrcvd ENABLED true
add_interface_port ss_app_flrrcvd ss_app_flrrcvd_tvalid tvalid  Input 1
add_interface_port ss_app_flrrcvd ss_app_flrrcvd_tdata tdata  Input 22

add_interface ss_app_flrcmpl axi4stream start
set_interface_property ss_app_flrcmpl associatedClock clk_csr
set_interface_property ss_app_flrcmpl ENABLED true
add_interface_port ss_app_flrcmpl ss_app_flrcmpl_tvalid tvalid  Output 1
add_interface_port ss_app_flrcmpl ss_app_flrcmpl_tdata tdata  Output 22

#
# fuctions
#
proc do_fileset_quartus_synth {output_name} {
    set filename ${output_name}.sv;
    set top_level_contents [render_top_level $output_name]
    add_fileset_file $filename SYSTEM_VERILOG TEXT $top_level_contents ;
}

proc render_top_level {output_name} {

    set template {

// Copyright 2020 Intel Corporation.
//
// THIS SOFTWARE MAY CONTAIN PREPRODUCTION CODE AND IS PROVIDED BY THE
// COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED
// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
// OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//

module ${output_name} (
   input clk_sys,
   input rst_n_sys,
   input clk_csr,
   input rst_n_csr,

    @@ for {set i 0} {$i<$num_ports} {incr i} {        
   output logic     flr_rst_n_port_${i},
    @@ }
 
   input            ss_app_flrrcvd_tvalid,
   input    [21:0]  ss_app_flrrcvd_tdata,
   output           ss_app_flrcmpl_tvalid,
   output   [21:0]  ss_app_flrcmpl_tdata

);

localparam NUM_PF            = ofs_fim_cfg_pkg::FIM_NUM_PF;
localparam NUM_VF            = ofs_fim_cfg_pkg::FIM_NUM_VF;
localparam MAX_NUM_VF        = ofs_fim_cfg_pkg::FIM_MAX_NUM_VF;

logic [NUM_PF-1:0]              pf_flr_rst_n;
logic [NUM_PF-1:0][NUM_VF-1:0]  vf_flr_rst_n;

pcie_ss_axis_pkg::t_axis_pcie_flr flr_req_if;
pcie_ss_axis_pkg::t_axis_pcie_flr flr_rsp_if;


// Routing table
@@ for {set i 0} {$i<$num_ports} {incr i} {
    @@ set pf_value [lindex $pf_val $i] 
    @@ set vf_value [lindex $vf_val $i] 
    @@ set va_value [lindex $va_val $i]
    always_ff @(posedge clk_sys) begin
        if(~rst_n_sys) begin 
            flr_rst_n_port_${i} <= 1'b0;
        end
        else begin
            @@ if {$va_value == 1} { 
                flr_rst_n_port_${i} <= pf_flr_rst_n[$pf_value] && vf_flr_rst_n[$pf_value][$vf_value];
            @@ } else {
                flr_rst_n_port_${i} <= pf_flr_rst_n[$pf_value];
            @@ }
        end
    end
@@ }

assign flr_req_if.tvalid = ss_app_flrrcvd_tvalid;
assign flr_req_if.tdata = ss_app_flrrcvd_tdata;

assign ss_app_flrcmpl_tvalid = flr_rsp_if.tvalid;
assign ss_app_flrcmpl_tdata = flr_rsp_if.tdata;

flr_rst_mgr #(
   .NUM_PF (NUM_PF),
   .NUM_VF (NUM_VF),
   .MAX_NUM_VF (MAX_NUM_VF)
) flr_rst_mgr (
   .clk_sys      (clk_sys),             // Global clock
   .rst_n_sys    (rst_n_sys),

   .clk_csr      (clk_csr),         // Clock for pcie_flr_req/rsp
   .rst_n_csr    (rst_n_csr),

   .pcie_flr_req (flr_req_if),
   .pcie_flr_rsp (flr_rsp_if),

   .pf_flr_rst_n (pf_flr_rst_n),
   .vf_flr_rst_n (vf_flr_rst_n)
);


endmodule

    }
    
    # setup template parameters
    set params(output_name) $output_name ;# template params are elements of a Tcl array
    set params(num_ports) [get_parameter_value N_PORT];
    set params(pf_val) [get_parameter_value PF];
    set params(vf_val) [get_parameter_value VF];
    set params(va_val) [get_parameter_value VA];
    
    
    # process template with parameters
    set contents [altera_terp $template params] ;# pass parameter array in by reference
    return $contents   
}

# This proc was put at the end to preserve syntax highlighting for the rest of the file
proc altera_terp { template parameters } {
        global terp_out
        set terp_out ""

    set r "";

    append r "global terp_out"
        upvar $parameters param;
        append r "\nupvar 2 $parameters param";
    foreach name [array names param] {
        append r "\nset $name " {$param(} "$name" {)}
    }
    
    set lines [split $template "\n"]
    foreach line $lines {
    
        set tclcmd ""
        set all ""
        set is_tcl_cmd [regexp {@@(.*)} $line all tclcmd]

        if {$is_tcl_cmd} {
            append r "\n$tclcmd";
        } else {
            # ----------------------------------------
            # This is not a tcl command, but we still want variable
            # substitution.
            # Escape '[', ']', and '"' so that TCL doesn't use them.
            # ----------------------------------------
            regsub -all {\[} $line {\\[} line
            regsub -all {\]} $line {\\]} line
            regsub -all {\"} $line {\\"} line
            
            append r "\nappend terp_out \"${line}\\n\""
        }
    }
        proc doGeneration { } "$r"
        if { [ catch { doGeneration } result ] == 1 } {
          puts stderr "proc doGeneration { } {"
          puts stderr "$r"
      puts stderr "}"
        }
        set terp_out ""
        doGeneration
    return $terp_out
}

# proc elaborate
proc elab {} {
    set num_ports [get_parameter_value N_PORT]
    for {set i 0} {$i < $num_ports} {incr i} {

        add_interface flr_rst_n_port_${i} conduit end
        set_interface_property flr_rst_n_port_${i} associatedClock clk_sys
        set_interface_property flr_rst_n_port_${i} associatedReset rst_n_sys
        set_interface_property flr_rst_n_port_${i} ENABLED true
        add_interface_port flr_rst_n_port_${i} flr_rst_n_port_${i} flr_rst_n Output 1

    }

    set va_val [get_parameter_value VA]
    set list_length [llength $va_val]
    # Error checks
    if {$num_ports != $list_length} {
         send_message error "N_PORTS must match the number of rows in the routing table"
         #send_message {Info Test} "numport $num_ports,  list_length $list_length , va_val $va_val"
    }

    # VA can be only 1 or 0
    foreach item $va_val {
        if {$item == 0 || $item == 1} {
        } else {
            send_message error "VA cannot be $item, allowed 0 or 1"
        }
    }

}



