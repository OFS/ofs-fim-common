// Copyright 2001-2023 Intel Corporation
// SPDX-License-Identifier: MIT




`timescale 1ps/1ps

// DESCRIPTION
// Ethernet style descrambler for 128 bit data.
// Generated by one of Gregg's toys.   Share And Enjoy.

module alt_e2550_descram128_hn #(
    parameter SIM_EMULATE = 1'b1
) (
    input clk,
    input din_valid,
    input [127:0] din,
    output [127:0] dout,
    output dout_valid
);

localparam WIDTH = 128;

reg [57:0] scram_state = {58{1'b1}};
wire [WIDTH+58-1:0] history;
wire [WIDTH-1:0] dout_w;
reg [WIDTH-1:0] dout_r = {WIDTH{1'b0}};
assign history = {din,scram_state};

genvar i;
generate
	for (i=0; i<WIDTH; i=i+1) begin : lp
		alt_e2550_lut6_hn #(.MASK (64'h6996966996696996)) w (
			.din({history[58+i-58],
			  history[58+i-39],
			  history[58+i],
			  3'b0}),
			.dout(dout_w[i]));
		//defparam w .MASK = 64'h6996966996696996;
		//defparam w .SIM_EMULATE = SIM_EMULATE;
		
	end
endgenerate

always @(posedge clk) begin
	if (din_valid) scram_state <= history[WIDTH+58-1:WIDTH];
	dout_r <= dout_w;
end
assign dout = dout_r;

reg din_valid_r = 1'b0;
always @(posedge clk) din_valid_r <= din_valid;
assign dout_valid = din_valid_r;

endmodule

